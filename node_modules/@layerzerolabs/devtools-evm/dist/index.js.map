{"version":3,"sources":["../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CompatibilityFallbackHandlerContract.js","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/CreateCallContract.js","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendCallOnlyContract.js","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/MultiSendContract.js","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SafeContract.js","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SafeProxyFactoryContract.js","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SignMessageLibContract.js","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/contracts/SimulateTxAccessorContract.js","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/dist/src/ethereumLibs/EthAdapter.js","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/src/types.ts","../../../node_modules/.pnpm/@safe-global+safe-core-sdk-types@2.3.0/node_modules/@safe-global/safe-core-sdk-types/src/index.ts","../src/address.ts","../src/errors/errors.ts","../src/errors/parser.ts","../src/schema.ts","../src/events/parser.ts","../src/omnigraph/coordinates.ts","../src/omnigraph/format.ts","../src/omnigraph/sdk.ts","../src/provider/factory.ts","../src/signer/sdk.ts","../src/simulation/anvil.ts"],"names":["OperationType","formatOmniPoint","_serializeTransaction","serializeTransaction_fn","host","port","mnemonic","count","derivationPath","forkUrl","forkBlockNumber","retries","timeout","blockTime","state","stateInterval"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=CompatibilityFallbackHandlerContract.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=CreateCallContract.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=MultiSendCallOnlyContract.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=MultiSendContract.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=SafeContract.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=SafeProxyFactoryContract.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=SignMessageLibContract.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=SimulateTxAccessorContract.js.map","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=EthAdapter.js.map",null,null,"import type { OmniAddress } from '@layerzerolabs/devtools'\nimport { getAddress, isAddress } from '@ethersproject/address'\nimport { AddressZero } from '@ethersproject/constants'\n\n/**\n * Turns a nullish value (`null` or `undefined`) into a zero address\n *\n * @param {OmniAddress | null | undefined} address\n *\n * @returns {string}\n */\nexport const makeZeroAddress = (address?: OmniAddress | null | undefined): string => address ?? AddressZero\n\n/**\n * Applies checksum to a given address, lower/uppercasing\n * necessary characters\n *\n * @param {OmniAddress} address\n * @returns {OmniAddress}\n */\nexport const addChecksum = (address: OmniAddress): OmniAddress => getAddress(address)\n\n/**\n * Re-export of `isAddress` from `@ethersporject/address`\n *\n * @param {OmniAddress} address\n * @returns {boolean}\n */\nexport const isEVMAddress = isAddress\n","import { printJson } from '@layerzerolabs/io-devtools'\n\nexport abstract class ContractError<TReason = unknown> extends Error {\n    public abstract readonly reason: TReason\n}\n\nexport class UnknownError extends ContractError<undefined> {\n    public readonly reason = undefined\n\n    constructor(message = 'Unknown contract error') {\n        super(message)\n        this.name = 'UnknownError'\n    }\n}\n\nexport class PanicError extends ContractError<bigint> {\n    constructor(\n        public readonly reason: bigint,\n        message: string = `Contract panicked (assert() has been called)`\n    ) {\n        super(message)\n        this.name = 'PanicError'\n    }\n\n    override toString(): string {\n        return `${super.toString()}. Error code ${this.reason}`\n    }\n}\n\nexport class RevertError extends ContractError<string> {\n    constructor(\n        public readonly reason: string,\n        message: string = `Contract reverted`\n    ) {\n        super(message)\n        this.name = 'RevertError'\n    }\n\n    override toString(): string {\n        return `${super.toString()}. Error reason '${this.reason}'`\n    }\n}\n\nexport class CustomError extends ContractError<string> {\n    constructor(\n        public readonly reason: string,\n        public readonly args: unknown[],\n        message: string = `Contract reverted with custom error`\n    ) {\n        super(message)\n        this.name = 'CustomError'\n    }\n\n    override toString(): string {\n        const formattedArgs = this.args.map((arg) => printJson(arg, false))\n\n        return `${super.toString()}. Error ${this.reason}(${formattedArgs})`\n    }\n}\n","import { defaultAbiCoder } from '@ethersproject/abi'\nimport { ContractError, CustomError, UnknownError, PanicError, RevertError } from './errors'\nimport { BigNumberishBigIntSchema } from '@/schema'\nimport type { Contract } from '@ethersproject/contracts'\nimport type { OmniContractErrorParserFactory } from './types'\n\n/**\n * Creates an error parser based on a specific `OmniContract`\n *\n * This call will never fail and will always return an instance of `ContractError`\n *\n * @param {OmniContract | null | undefined} contract\n * @returns {OmniContractErrorParser}\n */\nexport const createContractErrorParser: OmniContractErrorParserFactory = (contract) => (error) =>\n    // First we'll try to decode a contract error if we have a contract\n    (contract ? parseContractError(error, contract.contract) : null) ??\n    // Then we'll try decoding a generic one\n    parseGenericError(error) ??\n    // The we throw a generic one\n    new UnknownError(`Unknown error: ${toStringSafe(error)}`)\n\nexport const parseContractError = (error: unknown, contract: Contract): ContractError | undefined => {\n    // If the error already is a ContractError, we'll continue\n    if (error instanceof ContractError) {\n        return error\n    }\n\n    try {\n        // If the error is unknown we'll try to decode basic errors\n        const candidates = getErrorDataCandidates(error)\n\n        const contractDecoder = createContractDecoder(contract)\n        return candidates.flatMap(contractDecoder).at(0)\n    } catch {\n        return undefined\n    }\n}\n\nexport const parseGenericError = (error: unknown): ContractError | undefined => {\n    // If the error already is a ContractError, we'll continue\n    if (error instanceof ContractError) {\n        return error\n    }\n\n    try {\n        // If the error is unknown we'll try to decode basic errors\n        const candidates = getErrorDataCandidates(error)\n\n        // And return the first candidate\n        return candidates.flatMap(basicDecoder).at(0)\n    } catch {\n        return undefined\n    }\n}\n\n// If a contract reverts using revert, the error data will be prefixed with this beauty\nconst REVERT_ERROR_PREFIX = '0x08c379a0'\n\n// If a contract reverts with assert, the error data will be prefixed with this beauty\nconst PANIC_ERROR_PREFIX = '0x4e487b71'\n\n/**\n * Basic decoder can decode a set of common errors without having access to contract ABIs\n *\n * @param data `string` Error revert data\n *\n * @returns `ContractError[]` Decoded errors, if any\n */\nconst basicDecoder = (data: string): ContractError[] => {\n    if (data === '' || data === '0x') {\n        return [new UnknownError(`Reverted with empty data`)]\n    }\n\n    // This covers the case for assert()\n    if (data.startsWith(PANIC_ERROR_PREFIX)) {\n        const reason = data.slice(PANIC_ERROR_PREFIX.length)\n\n        // If the reason is empty, we'll assume the default 0 exit code\n        if (reason === '') {\n            return [new PanicError(BigInt(0))]\n        }\n\n        try {\n            // The codes should follow the docs here https://docs.soliditylang.org/en/latest/control-structures.html#error-handling-assert-require-revert-and-exceptions\n            const [decodedRawReason] = defaultAbiCoder.decode(['uint256'], `0x${reason}`)\n            const decodedReason = BigNumberishBigIntSchema.parse(decodedRawReason)\n\n            return [new PanicError(decodedReason)]\n        } catch {\n            return [new PanicError(BigInt(0), `Reason unknown, ABI decoding failed. The raw reason was '0x${reason}'`)]\n        }\n    }\n\n    // This covers the case for revert() and reject()\n    if (data.startsWith(REVERT_ERROR_PREFIX)) {\n        const reason = data.slice(REVERT_ERROR_PREFIX.length)\n\n        try {\n            const [decodedReason] = defaultAbiCoder.decode(['string'], `0x${reason}`)\n\n            return [new RevertError(decodedReason)]\n        } catch {\n            return [new RevertError(`Reason unknown, ABI decoding failed. The raw reason was '0x${reason}'`)]\n        }\n    }\n\n    return []\n}\n\n/**\n * Contract decoder uses the contract ABIs to decode error revert string\n *\n * @param contract `Contract`\n *\n * @returns `(data: string) => ContractError[]` Custom error decoder\n */\nconst createContractDecoder =\n    (contract: Contract) =>\n    (data: string): ContractError[] => {\n        try {\n            const errorDescription = contract.interface.parseError(data)\n\n            return [new CustomError(errorDescription.name, [...errorDescription.args])]\n        } catch {\n            return []\n        }\n    }\n\n/**\n * Helper function that traverses an unknown error and agthers all the fields\n * that could possibly contain the revert data.\n *\n * The results are order from the most specific one to the least specific one\n * since the function above will prioritize the results in front of the list\n *\n * @param error `unknown`\n *\n * @returns `string[]` A list of possible error revert strings\n */\nconst getErrorDataCandidates = (error: unknown): string[] =>\n    [\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any)?.error?.data?.data,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any)?.error?.data,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        (error as any)?.data,\n    ].filter((candidate: unknown) => typeof candidate === 'string')\n\n/**\n * Solves an issue with objects that cannot be converted to primitive values\n * and when stringified, they fail\n *\n * See https://stackoverflow.com/questions/41164750/cannot-convert-object-to-primitive-value\n *\n * @param {unknown} obj\n * @returns {string} String representation of an object or `'[unknown]'`\n */\nconst toStringSafe = (obj: unknown): string => {\n    try {\n        return String(obj)\n    } catch {\n        return '[unknown]'\n    }\n}\n","import { z } from 'zod'\nimport { BigNumber, BigNumberish, isBigNumberish } from '@ethersproject/bignumber/lib/bignumber'\n\nexport const BigNumberishSchema = z.custom<BigNumberish>((value: unknown) => isBigNumberish(value))\n\nexport const BigNumberishBigIntSchema = BigNumberishSchema.transform(BigNumber.from).transform((bn) => bn.toBigInt())\n\nexport const BigNumberishNumberSchema = BigNumberishSchema.transform(BigNumber.from).transform((bn) => bn.toNumber())\n","import type { LogDescription } from '@ethersproject/abi'\nimport { Contract } from '@ethersproject/contracts'\nimport { TransactionReceipt } from '@ethersproject/providers'\n\n/**\n * Parse event logs.\n * @param {TransactionReceipt} receipt\n * @param {Contract} contract\n * @returns {LogDescription[]}\n */\nexport const parseLogs = (receipt: TransactionReceipt, contract: Contract): LogDescription[] =>\n    receipt.logs?.flatMap((log) => {\n        // ensure the log address matches the contract address\n        if (log.address !== contract.address) {\n            return []\n        }\n        try {\n            return [contract.interface.parseLog(log)]\n        } catch {\n            return []\n        }\n    }) ?? []\n\n/**\n * Parse event logs with a specific name.\n * @param {TransactionReceipt} receipt\n * @param {Contract} contract\n * @param {string} name\n * @returns {LogDescription[]}\n */\nexport const parseLogsWithName = (receipt: TransactionReceipt, contract: Contract, name: string): LogDescription[] =>\n    parseLogs(receipt, contract).filter((log) => log.eventFragment.name === name)\n","import type { OmniPoint } from '@layerzerolabs/devtools'\nimport type { OmniContract } from './types'\nimport { Provider } from '@/provider/types'\n\nexport const omniContractToPoint = ({ eid, contract }: OmniContract): OmniPoint => ({\n    eid,\n    address: contract.address,\n})\n\nexport const connectOmniContract = ({ eid, contract }: OmniContract, provider: Provider): OmniContract => ({\n    eid,\n    contract: contract.connect(provider),\n})\n","import { formatOmniPoint } from '@layerzerolabs/devtools'\nimport type { OmniContract } from './types'\nimport { omniContractToPoint } from './coordinates'\n\nexport const formatOmniContract = (contract: OmniContract): string =>\n    `EVM contract at ${formatOmniPoint(omniContractToPoint(contract))}`\n","import type { OmniPoint, OmniTransaction } from '@layerzerolabs/devtools'\nimport type { IOmniSDK, OmniContract } from './types'\nimport { omniContractToPoint } from './coordinates'\nimport { createContractErrorParser } from '@/errors/parser'\nimport type { OmniContractErrorParser, OmniContractErrorParserFactory } from '@/errors/types'\nimport type { ContractError } from '@/errors/errors'\nimport { Logger, createModuleLogger } from '@layerzerolabs/io-devtools'\nimport { formatOmniContract } from './format'\n\n/**\n * Base class for all EVM SDKs, providing some common functionality\n * to reduce the boilerplate\n */\nexport abstract class OmniSDK implements IOmniSDK {\n    static #errorParserFactory: OmniContractErrorParserFactory = createContractErrorParser\n\n    /**\n     * Registers a `OmniContractErrorParserFactory` function to be used when\n     * an SDK needs to get an instance of `OmniContractErrorParser`.\n     *\n     * This enables us to use environment-specific error parsers\n     * while maintaining separation of concerns. For example, `hardhat`-specific\n     * environments can create error parsers based on all available errors from the build artifacts.\n     *\n     * @param {OmniContractErrorParserFactory | undefined} factory\n     * @returns {void}\n     */\n    static registerErrorParserFactory(factory: OmniContractErrorParserFactory | undefined): void {\n        this.#errorParserFactory = factory ?? createContractErrorParser\n    }\n\n    /**\n     * Creates an instance of `OmniContractErrorParser` based on the registered\n     * `OmniContractErrorParserFactory`\n     *\n     * @param {OmniContract | null | undefined} contract\n     * @returns {OmniContractErrorParser}\n     */\n    static createErrorParser(\n        contract: OmniContract | null | undefined\n    ): OmniContractErrorParser | Promise<OmniContractErrorParser> {\n        return this.#errorParserFactory(contract)\n    }\n\n    constructor(\n        public readonly contract: OmniContract,\n        protected readonly logger: Logger = createModuleLogger(\n            `EVM SDK ${new.target.name} @ ${formatOmniContract(contract)}`\n        )\n    ) {}\n\n    /**\n     * Human radable label for this SDK\n     */\n    get label(): string {\n        return formatOmniContract(this.contract)\n    }\n\n    get point(): OmniPoint {\n        return omniContractToPoint(this.contract)\n    }\n\n    protected createTransaction(data: string): OmniTransaction {\n        return {\n            point: this.point,\n            data,\n        }\n    }\n\n    protected async parseError(error: unknown): Promise<ContractError> {\n        const parser = await (this.constructor as typeof OmniSDK).createErrorParser(this.contract)\n\n        return parser(error)\n    }\n}\n","import pMemoize from 'p-memoize'\nimport { ProviderFactory, RpcUrlFactory } from './types'\nimport { JsonRpcProvider } from '@ethersproject/providers'\n\nexport const createProviderFactory = (urlFactory: RpcUrlFactory): ProviderFactory<JsonRpcProvider> =>\n    pMemoize(async (eid) => new JsonRpcProvider(await urlFactory(eid)))\n","import type { TransactionReceipt, TransactionRequest } from '@ethersproject/abstract-provider'\nimport type { Signer } from '@ethersproject/abstract-signer'\nimport Safe, { ConnectSafeConfig, EthersAdapter } from '@safe-global/protocol-kit'\nimport SafeApiKit from '@safe-global/api-kit'\nimport { MetaTransactionData, OperationType } from '@safe-global/safe-core-sdk-types'\nimport type { EndpointId } from '@layerzerolabs/lz-definitions'\nimport {\n    formatEid,\n    formatOmniPoint,\n    type OmniTransactionResponse,\n    type OmniSigner,\n    type OmniTransaction,\n} from '@layerzerolabs/devtools'\nimport assert from 'assert'\n\nimport { ethers } from 'ethers'\n\nexport abstract class OmniSignerEVMBase implements OmniSigner {\n    protected constructor(\n        public readonly eid: EndpointId,\n        public readonly signer: Signer\n    ) {}\n\n    protected assertTransaction(transaction: OmniTransaction) {\n        assert(\n            transaction.point.eid === this.eid,\n            `Could not use signer for ${formatEid(this.eid)} to sign a transaction for ${formatOmniPoint(\n                transaction.point\n            )}`\n        )\n    }\n\n    abstract sign(transaction: OmniTransaction): Promise<string>\n    abstract signAndSend(transaction: OmniTransaction): Promise<OmniTransactionResponse>\n}\n\n/**\n * Implements an OmniSigner interface for EVM-compatible chains\n */\nexport class OmniSignerEVM extends OmniSignerEVMBase {\n    constructor(eid: EndpointId, signer: Signer) {\n        super(eid, signer)\n    }\n\n    async sign(transaction: OmniTransaction): Promise<string> {\n        this.assertTransaction(transaction)\n\n        return this.signer.signTransaction(this.#serializeTransaction(transaction))\n    }\n\n    async signAndSend(transaction: OmniTransaction): Promise<OmniTransactionResponse<TransactionReceipt>> {\n        this.assertTransaction(transaction)\n\n        const nativeTransaction = this.#serializeTransaction(transaction)\n        const { hash, ...response } = await this.signer.sendTransaction(nativeTransaction)\n\n        return {\n            ...response,\n            transactionHash: hash,\n        }\n    }\n\n    #serializeTransaction(transaction: OmniTransaction): TransactionRequest {\n        return {\n            // mandatory\n            to: transaction.point.address,\n            data: transaction.data,\n\n            // optional\n            ...(transaction.gasLimit && { gasLimit: transaction.gasLimit }),\n            ...(transaction.value && { value: transaction.value }),\n        }\n    }\n}\n\n/**\n * Implements an OmniSigner interface for EVM-compatible chains using Gnosis Safe.\n */\nexport class GnosisOmniSignerEVM<TSafeConfig extends ConnectSafeConfig> extends OmniSignerEVMBase {\n    protected safeSdk: Safe | undefined\n    protected apiKit: SafeApiKit | undefined\n\n    constructor(\n        eid: EndpointId,\n        signer: Signer,\n        protected readonly safeUrl: string,\n        protected readonly safeConfig: TSafeConfig\n    ) {\n        super(eid, signer)\n    }\n\n    async sign(_transaction: OmniTransaction): Promise<string> {\n        throw new Error('Method not implemented.')\n    }\n\n    async signAndSend(transaction: OmniTransaction): Promise<OmniTransactionResponse> {\n        this.assertTransaction(transaction)\n        const { safeSdk, apiKit } = await this.#initSafe()\n        const safeTransaction = await safeSdk.createTransaction({\n            safeTransactionData: [this.#serializeTransaction(transaction)],\n        })\n        const safeTxHash = await safeSdk.getTransactionHash(safeTransaction)\n        const senderSignature = await safeSdk.signTransactionHash(safeTxHash)\n        const safeAddress = await safeSdk.getAddress()\n        const senderAddress = await this.signer.getAddress()\n        await apiKit.proposeTransaction({\n            senderSignature: senderSignature.data,\n            safeAddress,\n            safeTransactionData: safeTransaction.data,\n            safeTxHash,\n            senderAddress,\n        })\n        return {\n            transactionHash: safeTxHash,\n            wait: async (_confirmations?: number) => {\n                return {\n                    transactionHash: safeTxHash,\n                }\n            },\n        }\n    }\n\n    #serializeTransaction(transaction: OmniTransaction): MetaTransactionData {\n        return {\n            to: transaction.point.address,\n            data: transaction.data,\n            value: '0',\n            operation: OperationType.Call,\n        }\n    }\n\n    async #initSafe() {\n        if (this.safeConfig && (!this.safeSdk || !this.apiKit)) {\n            const ethAdapter = new EthersAdapter({\n                ethers,\n                signerOrProvider: this.signer,\n            })\n            this.apiKit = new SafeApiKit({ txServiceUrl: this.safeUrl, ethAdapter })\n\n            const contractNetworks = this.safeConfig.contractNetworks\n            this.safeSdk = await Safe.create({\n                ethAdapter,\n                safeAddress: this.safeConfig.safeAddress!,\n                ...(!!contractNetworks && { contractNetworks }),\n            })\n        }\n        if (!this.safeSdk || !this.apiKit) {\n            throw new Error('Safe SDK not initialized')\n        }\n        return { safeSdk: this.safeSdk, apiKit: this.apiKit }\n    }\n}\n","import { pipe } from 'fp-ts/lib/function'\nimport * as A from 'fp-ts/Array'\nimport * as O from 'fp-ts/Option'\n\nexport interface AnvilOptions {\n    //\n    // Server options\n    //\n\n    host?: string\n    port?: number\n\n    //\n    // Account options\n    //\n\n    mnemonic?: string\n    count?: number\n    derivationPath?: string\n\n    //\n    // Forking options\n    //\n\n    forkUrl?: string\n    forkBlockNumber?: number\n    retries?: number\n    timeout?: number\n\n    //\n    // EVM options\n    //\n\n    blockTime?: number\n\n    //\n    // State\n    //\n\n    state?: string\n    stateInterval?: number\n}\n\n/**\n * Creates a list of CLI arguments for `anvil` command\n * to be used with e.g. `spawn` command\n *\n * @param {AnvilOptions} options\n * @returns {string[]} `anvil` CLI arguments\n */\nexport const createAnvilCliOptions = ({\n    host,\n    port,\n    mnemonic,\n    forkUrl,\n    forkBlockNumber,\n    retries,\n    timeout,\n    blockTime,\n    count,\n    derivationPath,\n    state,\n    stateInterval,\n}: AnvilOptions): string[] =>\n    pipe(\n        [\n            pipe(\n                O.fromNullable(host),\n                O.map((host) => ['--host', host])\n            ),\n            pipe(\n                O.fromNullable(port),\n                O.map((port) => ['--port', String(port)])\n            ),\n            pipe(\n                O.fromNullable(mnemonic),\n                O.map((mnemonic) => ['--mnemonic', mnemonic])\n            ),\n            pipe(\n                O.fromNullable(count),\n                O.map((count) => ['--count', String(count)])\n            ),\n            pipe(\n                O.fromNullable(derivationPath),\n                O.map((derivationPath) => ['--derivation-path', derivationPath])\n            ),\n            pipe(\n                O.fromNullable(forkUrl),\n                O.map((forkUrl) => ['--fork-url', forkUrl])\n            ),\n            pipe(\n                O.fromNullable(forkBlockNumber),\n                O.map((forkBlockNumber) => ['--fork-block-number', String(forkBlockNumber)])\n            ),\n            pipe(\n                O.fromNullable(retries),\n                O.map((retries) => ['--retries', String(retries)])\n            ),\n            pipe(\n                O.fromNullable(timeout),\n                O.map((timeout) => ['--timeout', String(timeout)])\n            ),\n            pipe(\n                O.fromNullable(blockTime),\n                O.map((blockTime) => ['--block-time', String(blockTime)])\n            ),\n            pipe(\n                O.fromNullable(state),\n                O.map((state) => ['--state', state])\n            ),\n            pipe(\n                O.fromNullable(stateInterval),\n                O.map((stateInterval) => ['--state-interval', String(stateInterval)])\n            ),\n        ],\n        A.compact,\n        A.flatten\n    )\n"]}