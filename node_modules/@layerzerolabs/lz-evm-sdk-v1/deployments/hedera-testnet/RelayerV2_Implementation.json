{
  "address": "0x6C7Ab2202C98C4227C5c46f1417D81144DA716Ff",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "addr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApproveAddress",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalFee",
          "type": "uint256"
        }
      ],
      "name": "AssignJob",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "outboundProofType",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "baseGas",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "gasPerByte",
          "type": "uint64"
        }
      ],
      "name": "SetDstConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "dstPriceRatio",
          "type": "uint128"
        },
        {
          "indexed": false,
          "internalType": "uint128",
          "name": "dstGasPriceInWei",
          "type": "uint128"
        }
      ],
      "name": "SetDstPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "priceConfigUpdater",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "allow",
          "type": "bool"
        }
      ],
      "name": "SetPriceConfigUpdater",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "quantity",
          "type": "uint256"
        }
      ],
      "name": "ValueTransferFailed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "AIRDROP_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "approvedAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_userApplication",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payloadSize",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "assignJob",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstConfigLookup",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "baseGas",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "gasPerByte",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstFloorMarginsUSD",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstMultipliers",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        }
      ],
      "name": "dstPriceLookup",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint128",
              "name": "dstPriceRatio",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "dstGasPriceInWei",
              "type": "uint128"
            }
          ],
          "internalType": "struct RelayerV2.DstPrice",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "dstPriceLookupOld",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "dstPriceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "dstGasPriceInWei",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fpBytes",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_dstChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_userApplication",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_payloadSize",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_adapterParams",
          "type": "bytes"
        }
      ],
      "name": "getFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uln",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateBridgeAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateComposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nativeDecimalsRate",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayerAddress",
          "type": "address"
        }
      ],
      "name": "isApproved",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mptOverhead",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "multiplierBps",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeDecimalsRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stargateBridgeAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stargateComposer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_nativeDecimalsRate",
          "type": "uint256"
        }
      ],
      "name": "onUpgrade",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "priceConfigUpdaters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceFeed",
      "outputs": [
        {
          "internalType": "contract ILayerZeroPriceFeedV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_relayerAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_approve",
          "type": "bool"
        }
      ],
      "name": "setApprovedAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint16",
          "name": "_outboundProofType",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "_dstNativeAmtCap",
          "type": "uint128"
        },
        {
          "internalType": "uint64",
          "name": "_baseGas",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "_gasPerByte",
          "type": "uint64"
        }
      ],
      "name": "setDstConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "floorMargin",
              "type": "uint128"
            }
          ],
          "internalType": "struct RelayerV2.DstFloorMargin[]",
          "name": "_margins",
          "type": "tuple[]"
        }
      ],
      "name": "setDstFloorMarginsUSD",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint128",
          "name": "_dstPriceRatio",
          "type": "uint128"
        },
        {
          "internalType": "uint128",
          "name": "_dstGasPriceInWei",
          "type": "uint128"
        }
      ],
      "name": "setDstPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint16",
              "name": "chainId",
              "type": "uint16"
            },
            {
              "internalType": "uint128",
              "name": "multiplier",
              "type": "uint128"
            }
          ],
          "internalType": "struct RelayerV2.DstMultiplier[]",
          "name": "_multipliers",
          "type": "tuple[]"
        }
      ],
      "name": "setDstPriceMultipliers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_paused",
          "type": "bool"
        }
      ],
      "name": "setPause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceConfigUpdater",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_allow",
          "type": "bool"
        }
      ],
      "name": "setPriceConfigUpdater",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_priceFeed",
          "type": "address"
        }
      ],
      "name": "setPriceFeed",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint128",
          "name": "_multiplierBps",
          "type": "uint128"
        }
      ],
      "name": "setPriceMultiplierBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_stargateAddress",
          "type": "address"
        }
      ],
      "name": "setStargateAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateBridgeAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateBridgeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stargateComposer",
      "outputs": [
        {
          "internalType": "contract IStargateComposer",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uln",
      "outputs": [
        {
          "internalType": "contract ILayerZeroUltraLightNodeV2",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "validateProofBytes",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_transactionProof",
          "type": "bytes"
        }
      ],
      "name": "validateTransactionProofV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_dstAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_gasLimit",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_blockHash",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_data",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "_transactionProof",
          "type": "bytes"
        },
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "validateTransactionProofV2",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xade64196f766bb40f019eca93673cd8147b102508a58d017bee165e1b42c671d",
  "receipt": {
    "to": "0x6C7Ab2202C98C4227C5c46f1417D81144DA716Ff",
    "from": "0xc13b65f7c53Cd6db2EA205a4b574b4a0858720A6",
    "contractAddress": "0x6C7Ab2202C98C4227C5c46f1417D81144DA716Ff",
    "transactionIndex": 10,
    "gasUsed": "314986",
    "logsBloom": "0x
    "blockHash": "0xf62c2cdae6fa68d46a910ba16f25ca06e59c011a4929b76fbe761a7317448007",
    "transactionHash": "0xade64196f766bb40f019eca93673cd8147b102508a58d017bee165e1b42c671d",
    "logs": [],
    "blockNumber": 1311903,
    "cumulativeGasUsed": "314986",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9e16d1839a6fcad5499778d1cb65ccfe",
  "metadata": "{\"compiler\":{\"version\":\"0.7.6+commit.7338295f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApproveAddress\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalFee\",\"type\":\"uint256\"}],\"name\":\"AssignJob\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"outboundProofType\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstNativeAmtCap\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"name\":\"SetDstConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"indexed\":false,\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"name\":\"SetDstPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"priceConfigUpdater\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"allow\",\"type\":\"bool\"}],\"name\":\"SetPriceConfigUpdater\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"quantity\",\"type\":\"uint256\"}],\"name\":\"ValueTransferFailed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"AIRDROP_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"approvedAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"assignJob\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstConfigLookup\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"dstNativeAmtCap\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"gasPerByte\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstFloorMarginsUSD\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstMultipliers\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"}],\"name\":\"dstPriceLookup\",\"outputs\":[{\"components\":[{\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"internalType\":\"struct RelayerV2.DstPrice\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"dstPriceLookupOld\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"dstGasPriceInWei\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fpBytes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_dstChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_userApplication\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_payloadSize\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_adapterParams\",\"type\":\"bytes\"}],\"name\":\"getFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uln\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateBridgeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateComposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nativeDecimalsRate\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"}],\"name\":\"isApproved\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mptOverhead\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"multiplierBps\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeDecimalsRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stargateBridgeAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stargateComposer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_nativeDecimalsRate\",\"type\":\"uint256\"}],\"name\":\"onUpgrade\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"priceConfigUpdaters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceFeed\",\"outputs\":[{\"internalType\":\"contract ILayerZeroPriceFeedV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_relayerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_approve\",\"type\":\"bool\"}],\"name\":\"setApprovedAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"_outboundProofType\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_dstNativeAmtCap\",\"type\":\"uint128\"},{\"internalType\":\"uint64\",\"name\":\"_baseGas\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_gasPerByte\",\"type\":\"uint64\"}],\"name\":\"setDstConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"floorMargin\",\"type\":\"uint128\"}],\"internalType\":\"struct RelayerV2.DstFloorMargin[]\",\"name\":\"_margins\",\"type\":\"tuple[]\"}],\"name\":\"setDstFloorMarginsUSD\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"_dstPriceRatio\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"_dstGasPriceInWei\",\"type\":\"uint128\"}],\"name\":\"setDstPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint16\",\"name\":\"chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint128\",\"name\":\"multiplier\",\"type\":\"uint128\"}],\"internalType\":\"struct RelayerV2.DstMultiplier[]\",\"name\":\"_multipliers\",\"type\":\"tuple[]\"}],\"name\":\"setDstPriceMultipliers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_paused\",\"type\":\"bool\"}],\"name\":\"setPause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceConfigUpdater\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_allow\",\"type\":\"bool\"}],\"name\":\"setPriceConfigUpdater\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_priceFeed\",\"type\":\"address\"}],\"name\":\"setPriceFeed\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint128\",\"name\":\"_multiplierBps\",\"type\":\"uint128\"}],\"name\":\"setPriceMultiplierBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_stargateAddress\",\"type\":\"address\"}],\"name\":\"setStargateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateBridgeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateBridgeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stargateComposer\",\"outputs\":[{\"internalType\":\"contract IStargateComposer\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uln\",\"outputs\":[{\"internalType\":\"contract ILayerZeroUltraLightNodeV2\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"validateProofBytes\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_transactionProof\",\"type\":\"bytes\"}],\"name\":\"validateTransactionProofV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_dstAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_gasLimit\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_blockHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_data\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"_transactionProof\",\"type\":\"bytes\"},{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"validateTransactionProofV2\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RelayerV2.sol\":\"RelayerV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":30000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xba7ba5b188c0b27489bad1efee8d8b1dcebb502785192b22e3d69824a802983d\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity >=0.4.24 <0.8.0;\\n\\nimport \\\"../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || _isConstructor() || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd8e4eb08dcc1d1860fb347ba5ffd595242b9a1b66d49a47f2b4cb51c3f35017e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1fd568d8b8ca285c801fbd1d3f40f848434d850a682c0273786cada3e0b84057\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xbbf8a21b9a66c48d45ff771b8563c6df19ba451d63dfb8380a865c1e1f29d1a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xe22a1fc7400ae196eba2ad1562d0386462b00a6363b742d55a2fd2021a58586f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbd74f587ab9b9711801baf667db1426e4a03fd2d7f15af33e0e0d0394e7cef76\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"../../math/SafeMath.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using SafeMath for uint256;\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc77dd6233a82c7c6e3dc49da8f3456baa00ecd3ea4dfa9222002a9aebf155dcd\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf89f005a3d98f7768cdee2583707db0ac725cf567d455751af32ee68132f3db3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.7.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1153f6dd334c01566417b8c551122450542a2b75a2bbb379d59a8c320ed6da28\",\"license\":\"MIT\"},\"contracts/RelayerV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity ^0.7.6;\\npragma abicoder v2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport \\\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\\\";\\n\\nimport \\\"./interfaces/ILayerZeroRelayerV2.sol\\\";\\nimport \\\"./interfaces/ILayerZeroUltraLightNodeV2.sol\\\";\\nimport \\\"./interfaces/ILayerZeroPriceFeedV2.sol\\\";\\n\\ninterface IStargateComposer {\\n    function isSending() external view returns (bool);\\n}\\n\\ncontract RelayerV2 is ReentrancyGuard, OwnableUpgradeable, Proxied, ILayerZeroRelayerV2 {\\n    using SafeERC20 for IERC20;\\n    using SafeMath for uint;\\n    using SafeMath for uint128;\\n    using SafeMath for uint64;\\n\\n    ILayerZeroUltraLightNodeV2 public uln;\\n    address public stargateBridgeAddress;\\n    uint public constant AIRDROP_GAS_LIMIT = 10000;\\n\\n    struct DstPrice {\\n        uint128 dstPriceRatio; // 10^10\\n        uint128 dstGasPriceInWei;\\n    }\\n\\n    struct DstConfig {\\n        uint128 dstNativeAmtCap;\\n        uint64 baseGas;\\n        uint64 gasPerByte;\\n    }\\n\\n    struct DstMultiplier {\\n        uint16 chainId;\\n        uint128 multiplier;\\n    }\\n\\n    struct DstFloorMargin {\\n        uint16 chainId;\\n        uint128 floorMargin;\\n    }\\n\\n    // [_chainId] => DstPriceData. change often\\n    mapping(uint16 => DstPrice) public dstPriceLookupOld;\\n    // [_chainId][_outboundProofType] => DstConfig. change much less often\\n    mapping(uint16 => mapping(uint16 => DstConfig)) public dstConfigLookup;\\n    mapping(address => bool) public approvedAddresses;\\n\\n    event Withdraw(address to, uint amount);\\n    event ApproveAddress(address addr, bool approved);\\n    event SetPriceConfigUpdater(address priceConfigUpdater, bool allow);\\n    event AssignJob(uint totalFee);\\n    event ValueTransferFailed(address indexed to, uint indexed quantity);\\n    event SetDstPrice(uint16 chainId, uint128 dstPriceRatio, uint128 dstGasPriceInWei);\\n    event SetDstConfig(\\n        uint16 chainId,\\n        uint16 outboundProofType,\\n        uint128 dstNativeAmtCap,\\n        uint64 baseGas,\\n        uint64 gasPerByte\\n    );\\n\\n    // new pauseable relayer\\n    bool public paused;\\n\\n    // Update for Price Feed\\n    ILayerZeroPriceFeedV2 public priceFeed;\\n    // multipler for airdrop\\n    uint128 public multiplierBps;\\n\\n    // PriceFeedContract Upgrade\\n    // all encoded param bytes except for proof for validateTransactionProofV1\\n    uint16 public validateProofBytes;\\n    uint16 public fpBytes;\\n    uint16 public mptOverhead;\\n\\n    // [chainId] => [multiplier]\\n    mapping(uint16 => uint128) public dstMultipliers;\\n    // [chainId] => [floor margin in USD]\\n    mapping(uint16 => uint128) public dstFloorMarginsUSD;\\n    mapping(address => bool) public priceConfigUpdaters;\\n\\n    // stargate guard\\n    IStargateComposer public stargateComposer;\\n    address public stargateBridgeAddr;\\n\\n    uint256 public nativeDecimalsRate;\\n\\n    // owner is always approved\\n    modifier onlyApproved() {\\n        if (owner() != msg.sender) {\\n            require(isApproved(msg.sender), \\\"Relayer: not approved\\\");\\n        }\\n        _;\\n    }\\n\\n    modifier onlyPriceConfigUpdater() {\\n        if (owner() != msg.sender && !approvedAddresses[msg.sender]) {\\n            require(priceConfigUpdaters[msg.sender], \\\"Relayer: not updater\\\");\\n        }\\n        _;\\n    }\\n\\n    function initialize(\\n        address _uln,\\n        address _priceFeed,\\n        address _stargateBridgeAddr,\\n        address _stargateComposer,\\n        uint256 _nativeDecimalsRate\\n    ) public proxied initializer {\\n        __Ownable_init();\\n        uln = ILayerZeroUltraLightNodeV2(_uln);\\n        setApprovedAddress(address(this), true);\\n        multiplierBps = 12000;\\n        priceFeed = ILayerZeroPriceFeedV2(_priceFeed);\\n        validateProofBytes = 164;\\n        fpBytes = 160;\\n        mptOverhead = 500;\\n        stargateBridgeAddr = _stargateBridgeAddr;\\n        stargateComposer = IStargateComposer(_stargateComposer);\\n        nativeDecimalsRate = _nativeDecimalsRate;\\n    }\\n\\n    function onUpgrade(\\n        address _stargateBridgeAddr,\\n        address _stargateComposer,\\n        uint256 _nativeDecimalsRate\\n    ) public proxied {\\n        stargateBridgeAddr = _stargateBridgeAddr;\\n        stargateComposer = IStargateComposer(_stargateComposer);\\n        nativeDecimalsRate = _nativeDecimalsRate;\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // onlyApproved\\n\\n    function setDstPrice(uint16 _chainId, uint128 _dstPriceRatio, uint128 _dstGasPriceInWei) external onlyApproved {\\n        // No longer used: Write prices in PriceFeed.\\n    }\\n\\n    function setPriceFeed(address _priceFeed) external onlyApproved {\\n        priceFeed = ILayerZeroPriceFeedV2(_priceFeed);\\n    }\\n\\n    function setPriceMultiplierBps(uint128 _multiplierBps) external onlyApproved {\\n        multiplierBps = _multiplierBps;\\n    }\\n\\n    function setDstPriceMultipliers(DstMultiplier[] calldata _multipliers) external onlyPriceConfigUpdater {\\n        for (uint i = 0; i < _multipliers.length; i++) {\\n            DstMultiplier calldata _data = _multipliers[i];\\n            dstMultipliers[_data.chainId] = _data.multiplier;\\n        }\\n    }\\n\\n    function setDstFloorMarginsUSD(DstFloorMargin[] calldata _margins) external onlyPriceConfigUpdater {\\n        for (uint i = 0; i < _margins.length; i++) {\\n            DstFloorMargin calldata _data = _margins[i];\\n            dstFloorMarginsUSD[_data.chainId] = _data.floorMargin;\\n        }\\n    }\\n\\n    function setDstConfig(\\n        uint16 _chainId,\\n        uint16 _outboundProofType,\\n        uint128 _dstNativeAmtCap,\\n        uint64 _baseGas,\\n        uint64 _gasPerByte\\n    ) external onlyApproved {\\n        dstConfigLookup[_chainId][_outboundProofType] = DstConfig(_dstNativeAmtCap, _baseGas, _gasPerByte);\\n        emit SetDstConfig(_chainId, _outboundProofType, _dstNativeAmtCap, _baseGas, _gasPerByte);\\n    }\\n\\n    function setStargateAddress(address _stargateAddress) external onlyApproved {\\n        stargateBridgeAddress = _stargateAddress;\\n    }\\n\\n    //----------------------------------------------------------------------------------\\n    // onlyOwner\\n\\n    function setApprovedAddress(address _relayerAddress, bool _approve) public onlyOwner {\\n        approvedAddresses[_relayerAddress] = _approve;\\n        emit ApproveAddress(_relayerAddress, _approve);\\n    }\\n\\n    function setPriceConfigUpdater(address _priceConfigUpdater, bool _allow) public onlyOwner {\\n        priceConfigUpdaters[_priceConfigUpdater] = _allow;\\n        emit SetPriceConfigUpdater(_priceConfigUpdater, _allow);\\n    }\\n\\n    function setPause(bool _paused) public onlyOwner {\\n        paused = _paused;\\n    }\\n\\n    // txType 1\\n    // bytes  [2       32      ]\\n    // fields [txType  extraGas]\\n    // txType 2\\n    // bytes  [2       32        32            bytes[]         ]\\n    // fields [txType  extraGas  dstNativeAmt  dstNativeAddress]\\n    // User App Address is not used in this version\\n    function _getPrices(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address,\\n        uint _payloadSize,\\n        bytes memory _adapterParameters\\n    ) internal view returns (uint) {\\n        require(!paused, \\\"Admin: paused\\\");\\n        // decoding the _adapterParameters - reverts if type 2 and there is no dstNativeAddress\\n        require(\\n            _adapterParameters.length == 34 || _adapterParameters.length > 66,\\n            \\\"Relayer: wrong _adapterParameters size\\\"\\n        );\\n        uint16 txType;\\n        uint extraGas;\\n        assembly {\\n            txType := mload(add(_adapterParameters, 2))\\n            extraGas := mload(add(_adapterParameters, 34))\\n        }\\n        require(extraGas > 0, \\\"Relayer: gas too low\\\");\\n        require(txType == 1 || txType == 2, \\\"Relayer: unsupported txType\\\");\\n\\n        DstConfig storage dstConfig = dstConfigLookup[_dstChainId][_outboundProofType];\\n\\n        // validateTransactionProof bytes = fixedBytes + proofBytes\\n        // V2 has an extra 32 bytes for payable address\\n        uint totalFixedBytes = txType == 2 ? uint(validateProofBytes).add(32) : validateProofBytes;\\n        uint proofBytes = _outboundProofType == 2 ? _payloadSize.add(fpBytes) : _payloadSize.add(mptOverhead);\\n\\n        uint16 dstChainId = _dstChainId; // stack too deep\\n        (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD) = priceFeed\\n            .estimateFeeByEid(dstChainId, totalFixedBytes.add(proofBytes), dstConfig.baseGas.add(extraGas));\\n\\n        uint dstNativeAmt = 0;\\n        if (txType == 2) {\\n            assembly {\\n                dstNativeAmt := mload(add(_adapterParameters, 66))\\n            }\\n            require(dstConfig.dstNativeAmtCap >= dstNativeAmt, \\\"Relayer: dstNativeAmt too large\\\");\\n        }\\n        uint airdropAmount = 0;\\n        if (dstNativeAmt > 0) {\\n            // gas saver if no airdrop\\n            airdropAmount = dstNativeAmt.mul(priceRatio).div(priceRatioDenominator).mul(multiplierBps).div(10000); // cheaper than priceFeed.getPriceRatioDenominator()\\n        }\\n        return _getDstTxCost(dstChainId, fee, nativePriceUSD).add(airdropAmount);\\n    }\\n\\n    function _getDstTxCost(uint16 _dstChainId, uint _fee, uint128 nativeTokenPriceUSD) private view returns (uint) {\\n        uint128 _dstMultiplier = dstMultipliers[_dstChainId];\\n        if (_dstMultiplier == 0) {\\n            _dstMultiplier = multiplierBps;\\n        }\\n        uint dstTxCostWithMultiplier = _fee.mul(_dstMultiplier).div(10000);\\n\\n        if (nativeTokenPriceUSD == 0) {\\n            return dstTxCostWithMultiplier;\\n        }\\n\\n        uint dstTxCostWithMargin = _fee.add(\\n            dstFloorMarginsUSD[_dstChainId].mul(nativeDecimalsRate).div(nativeTokenPriceUSD)\\n        );\\n\\n        return dstTxCostWithMargin > dstTxCostWithMultiplier ? dstTxCostWithMargin : dstTxCostWithMultiplier;\\n    }\\n\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external view override returns (uint) {\\n        require(_payloadSize <= 10000, \\\"Relayer: _payloadSize tooooo big\\\");\\n        return _getPrices(_dstChainId, _outboundProofType, _userApplication, _payloadSize, _adapterParams);\\n    }\\n\\n    // view function to convert pricefeed price to current price (for backwards compatibility)\\n    function dstPriceLookup(uint16 _dstChainId) public view returns (DstPrice memory) {\\n        ILayerZeroPriceFeedV2.Price memory price = priceFeed.getPrice(_dstChainId);\\n        return DstPrice(price.priceRatio, price.gasPriceInUnit);\\n    }\\n\\n    function isApproved(address _relayerAddress) public view returns (bool) {\\n        return approvedAddresses[_relayerAddress];\\n    }\\n\\n    function assignJob(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external override returns (uint fee) {\\n        require(msg.sender == address(uln), \\\"Relayer: invalid uln\\\");\\n        require(_payloadSize <= 10000, \\\"Relayer: _payloadSize > 10000\\\");\\n\\n        if (_userApplication == stargateBridgeAddr) {\\n            // following way also prevents user from inputting to address greater than 32 bytes\\n            bool validPayload = (_payloadSize == 544 || // swap with no payload\\n                _payloadSize == 320 || // redeem local callback\\n                _payloadSize == 288 || // redeem local\\n                _payloadSize == 160); // send credits\\n\\n            if (!validPayload) {\\n                require(stargateComposer.isSending(), \\\"Relayer: stargate composer is not sending\\\");\\n            }\\n        }\\n\\n        fee = _getPrices(_dstChainId, _outboundProofType, _userApplication, _payloadSize, _adapterParams);\\n        emit AssignJob(fee);\\n    }\\n\\n    function withdrawFee(address payable _to, uint _amount) external override onlyApproved {\\n        uint totalFee = uln.accruedNativeFee(address(this));\\n        require(_amount <= totalFee, \\\"Relayer: not enough fee for withdrawal\\\");\\n        uln.withdrawNative(_to, _amount);\\n    }\\n\\n    function withdrawToken(address _token, address _to, uint _amount) external onlyApproved {\\n        if (_token == address(0)) {\\n            uint total = address(this).balance;\\n            require(_amount <= total, \\\"Relayer: not enough native fee for withdrawal\\\");\\n            (bool sent, ) = payable(_to).call{ value: _amount }(\\\"\\\");\\n            require(sent, \\\"Relayer: failed to send ether\\\");\\n        } else {\\n            uint total = IERC20(_token).balanceOf(address(this));\\n            require(_amount <= total, \\\"Relayer: not enough fee for withdrawal\\\");\\n            IERC20(_token).safeTransfer(_to, _amount);\\n        }\\n    }\\n\\n    function validateTransactionProofV2(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _blockHash,\\n        bytes32 _data,\\n        bytes calldata _transactionProof,\\n        address payable _to\\n    ) external payable onlyApproved nonReentrant {\\n        (bool sent, ) = _to.call{ gas: AIRDROP_GAS_LIMIT, value: msg.value }(\\\"\\\");\\n        //require(sent, \\\"Relayer: failed to send ether\\\");\\n        if (!sent) {\\n            emit ValueTransferFailed(_to, msg.value);\\n        }\\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _data, _transactionProof);\\n    }\\n\\n    function validateTransactionProofV1(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _blockHash,\\n        bytes32 _data,\\n        bytes calldata _transactionProof\\n    ) external onlyApproved nonReentrant {\\n        uln.validateTransactionProof(_srcChainId, _dstAddress, _gasLimit, _blockHash, _data, _transactionProof);\\n    }\\n}\\n\",\"keccak256\":\"0x21104ca924bc53d9089bcf47ae2865742837313737d682a1e0ec860606243744\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroPriceFeedV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\n// copy of \\\"@layerzerolabs/lz-evm-messagelib-v2/contracts/interfaces/ILayerZeroPriceFeed.sol\\\"\\ninterface ILayerZeroPriceFeedV2 {\\n    /**\\n     * @dev\\n     * priceRatio: (USD price of 1 unit of remote native token in unit of local native token) * PRICE_RATIO_DENOMINATOR\\n     */\\n\\n    struct Price {\\n        uint128 priceRatio; // float value * 10 ^ 20, decimal awared. for aptos to evm, the basis would be (10^18 / 10^8) * 10 ^20 = 10 ^ 30.\\n        uint64 gasPriceInUnit; // for evm, it is in wei, for aptos, it is in octas.\\n        uint32 gasPerByte;\\n    }\\n\\n    struct UpdatePrice {\\n        uint32 eid;\\n        Price price;\\n    }\\n\\n    /**\\n     * @dev\\n     *    ArbGasInfo.go:GetPricesInArbGas\\n     *\\n     */\\n    struct ArbitrumPriceExt {\\n        uint64 gasPerL2Tx; // L2 overhead\\n        uint32 gasPerL1CallDataByte;\\n    }\\n\\n    struct UpdatePriceExt {\\n        uint32 eid;\\n        Price price;\\n        ArbitrumPriceExt extend;\\n    }\\n\\n    function getPrice(uint32 _dstEid) external view returns (Price memory);\\n\\n    function getPriceRatioDenominator() external view returns (uint128);\\n\\n    function estimateFeeByEid(\\n        uint32 _dstEid,\\n        uint _callDataSize,\\n        uint _gas\\n    ) external view returns (uint fee, uint128 priceRatio, uint128 priceRatioDenominator, uint128 nativePriceUSD);\\n}\\n\",\"keccak256\":\"0xfbe8d15c8baebbdbfa172294bc402bc9955a765d545200e4179944b0bb02497f\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroRelayerV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\n\\ninterface ILayerZeroRelayerV2 {\\n    // @notice query price and assign jobs at the same time\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function assignJob(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external returns (uint price);\\n\\n    // @notice query the relayer price for relaying the payload and its proof to the destination chain\\n    // @param _dstChainId - the destination endpoint identifier\\n    // @param _outboundProofType - the proof type identifier to specify proof to be relayed\\n    // @param _userApplication - the source sending contract address. relayers may apply price discrimination to user apps\\n    // @param _payloadSize - the length of the payload. it is an indicator of gas usage for relaying cross-chain messages\\n    // @param _adapterParams - optional parameters for extra service plugins, e.g. sending dust tokens at the destination chain\\n    function getFee(\\n        uint16 _dstChainId,\\n        uint16 _outboundProofType,\\n        address _userApplication,\\n        uint _payloadSize,\\n        bytes calldata _adapterParams\\n    ) external view returns (uint price);\\n\\n    // @notice withdraw the accrued fee in ultra light node\\n    // @param _to - the fee receiver\\n    // @param _amount - the withdrawal amount\\n    function withdrawFee(address payable _to, uint _amount) external;\\n}\\n\",\"keccak256\":\"0x107681e3ab53b6b34780fe6c540e4ad2d149f94fdfe3e7b16e1101dc92ae914e\",\"license\":\"BUSL-1.1\"},\"contracts/interfaces/ILayerZeroUltraLightNodeV2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\n\\npragma solidity >=0.7.0;\\npragma abicoder v2;\\n\\ninterface ILayerZeroUltraLightNodeV2 {\\n    // Relayer functions\\n    function validateTransactionProof(\\n        uint16 _srcChainId,\\n        address _dstAddress,\\n        uint _gasLimit,\\n        bytes32 _lookupHash,\\n        bytes32 _blockData,\\n        bytes calldata _transactionProof\\n    ) external;\\n\\n    // an Oracle delivers the block data using updateHash()\\n    function updateHash(uint16 _srcChainId, bytes32 _lookupHash, uint _confirmations, bytes32 _blockData) external;\\n\\n    // can only withdraw the receivable of the msg.sender\\n    function withdrawNative(address payable _to, uint _amount) external;\\n\\n    function withdrawZRO(address _to, uint _amount) external;\\n\\n    // view functions\\n    function getAppConfig(\\n        uint16 _remoteChainId,\\n        address _userApplicationAddress\\n    ) external view returns (ApplicationConfiguration memory);\\n\\n    function accruedNativeFee(address _address) external view returns (uint);\\n\\n    struct ApplicationConfiguration {\\n        uint16 inboundProofLibraryVersion;\\n        uint64 inboundBlockConfirmations;\\n        address relayer;\\n        uint16 outboundProofType;\\n        uint64 outboundBlockConfirmations;\\n        address oracle;\\n    }\\n\\n    event HashReceived(\\n        uint16 indexed srcChainId,\\n        address indexed oracle,\\n        bytes32 lookupHash,\\n        bytes32 blockData,\\n        uint confirmations\\n    );\\n    event RelayerParams(bytes adapterParams, uint16 outboundProofType);\\n    event Packet(bytes payload);\\n    event InvalidDst(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event PacketReceived(\\n        uint16 indexed srcChainId,\\n        bytes srcAddress,\\n        address indexed dstAddress,\\n        uint64 nonce,\\n        bytes32 payloadHash\\n    );\\n    event AppConfigUpdated(address indexed userApplication, uint indexed configType, bytes newConfig);\\n    event AddInboundProofLibraryForChain(uint16 indexed chainId, address lib);\\n    event EnableSupportedOutboundProof(uint16 indexed chainId, uint16 proofType);\\n    event SetChainAddressSize(uint16 indexed chainId, uint size);\\n    event SetDefaultConfigForChainId(\\n        uint16 indexed chainId,\\n        uint16 inboundProofLib,\\n        uint64 inboundBlockConfirm,\\n        address relayer,\\n        uint16 outboundProofType,\\n        uint64 outboundBlockConfirm,\\n        address oracle\\n    );\\n    event SetDefaultAdapterParamsForChainId(uint16 indexed chainId, uint16 indexed proofType, bytes adapterParams);\\n    event SetLayerZeroToken(address indexed tokenAddress);\\n    event SetRemoteUln(uint16 indexed chainId, bytes32 uln);\\n    event SetTreasury(address indexed treasuryAddress);\\n    event WithdrawZRO(address indexed msgSender, address indexed to, uint amount);\\n    event WithdrawNative(address indexed msgSender, address indexed to, uint amount);\\n}\\n\",\"keccak256\":\"0xf1f36bbbc40d03b96affa151affb47da75a1b69dc79f4b311841a072d12fdd22\",\"license\":\"BUSL-1.1\"},\"hardhat-deploy/solc_0.7/proxy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.0;\\n\\nabstract contract Proxied {\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x760a00cd889372a2358732403723d8a13cb8b02bb82450a9bf5488177828aa79\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506001600055613d11806100256000396000f3fe6080604052600436106102c65760003560e01c8063741bef1a11610179578063b8f8bad4116100d6578063d5f8b0141161008a578063f2fde38b11610064578063f2fde38b1461075a578063f7013ef61461077a578063fd9be5221461079a576102c6565b8063d5f8b014146106fa578063efbf196a1461071a578063f136a8741461073a576102c6565b8063bf4dab51116100bb578063bf4dab511461069a578063c03f1529146106ba578063c3b04e7f146106da576102c6565b8063b8f8bad41461065a578063bedb86fb1461067a576102c6565b80638644c5781161012d57806398dabd501161011257806398dabd501461061b5780639e8c717814610630578063ac353e0414610645576102c6565b80638644c578146105d85780638da5cb5b14610606576102c6565b8063801db1fe1161015e578063801db1fe1461058357806381ba209a146105a35780638576db67146105b8576102c6565b8063741bef1a14610541578063765a8a5414610556576102c6565b806355b3524911610227578063673448dd116101db5780636c473aff116101c05780636c473aff146104f7578063715018a61461050c578063724e78da14610521576102c6565b8063673448dd146104b557806369cf4e3a146104d5576102c6565b80635886ea651161020c5780635886ea651461045e5780635c975abb1461047e5780636348d269146104a0576102c6565b806355b352491461041e578063575765e21461043e576102c6565b80633352b6081161027e5780633f103487116102635780633f103487146103af57806343b9a0c4146103cf5780634eeba250146103f1576102c6565b80633352b608146103785780633bfb40471461039a576102c6565b80630508941e116102af5780630508941e1461030d57806323161ff814610320578063252f7b0114610358576102c6565b806301e33667146102cb57806303343f54146102ed575b600080fd5b3480156102d757600080fd5b506102eb6102e6366004613174565b6107ba565b005b3480156102f957600080fd5b506102eb6103083660046130ca565b6109c7565b6102eb61031b36600461338f565b610a57565b34801561032c57600080fd5b5061034061033b36600461346c565b610c5d565b60405161034f93929190613a76565b60405180910390f35b34801561036457600080fd5b506102eb61037336600461330d565b610ccb565b34801561038457600080fd5b5061038d610e13565b60405161034f91906135f8565b3480156103a657600080fd5b5061038d610e2f565b3480156103bb57600080fd5b506102eb6103ca36600461351d565b610e4b565b3480156103db57600080fd5b506103e4610fe3565b60405161034f9190613ba9565b3480156103fd57600080fd5b5061041161040c3660046132f3565b610fe9565b60405161034f9190613a36565b34801561042a57600080fd5b506104116104393660046132f3565b61100d565b34801561044a57600080fd5b506102eb6104593660046131b4565b611031565b34801561046a57600080fd5b506103e461047936600461349e565b61114c565b34801561048a57600080fd5b50610493611340565b60405161034f9190613667565b3480156104ac57600080fd5b5061038d611349565b3480156104c157600080fd5b506104936104d03660046130ca565b611365565b3480156104e157600080fd5b506104ea611394565b60405161034f9190613aaa565b34801561050357600080fd5b5061038d6113b4565b34801561051857600080fd5b506102eb6113d0565b34801561052d57600080fd5b506102eb61053c3660046130ca565b6114cd565b34801561054d57600080fd5b5061038d611562565b34801561056257600080fd5b506105766105713660046132f3565b611583565b60405161034f9190613a0a565b34801561058f57600080fd5b506102eb61059e3660046131b4565b611675565b3480156105af57600080fd5b506104ea611784565b3480156105c457600080fd5b506104936105d33660046130ca565b6117a6565b3480156105e457600080fd5b506105f86105f33660046132f3565b6117bb565b60405161034f929190613a53565b34801561061257600080fd5b5061038d6117f7565b34801561062757600080fd5b506104ea611813565b34801561063c57600080fd5b506103e4611831565b34801561065157600080fd5b50610411611837565b34801561066657600080fd5b506102eb610675366004613424565b61184f565b34801561068657600080fd5b506102eb61069536600461322c565b611898565b3480156106a657600080fd5b506102eb6106b53660046131ec565b611957565b3480156106c657600080fd5b506103e46106d536600461349e565b611a68565b3480156106e657600080fd5b506102eb6106f53660046132d7565b611ada565b34801561070657600080fd5b506102eb6107153660046131ec565b611b66565b34801561072657600080fd5b506102eb610735366004613174565b611c77565b34801561074657600080fd5b506104936107553660046130ca565b611d57565b34801561076657600080fd5b506102eb6107753660046130ca565b611d6c565b34801561078657600080fd5b506102eb610795366004613111565b611eda565b3480156107a657600080fd5b506102eb6107b53660046130e6565b612219565b336107c36117f7565b73ffffffffffffffffffffffffffffffffffffffff161461080c576107e733611365565b61080c5760405162461bcd60e51b815260040161080390613672565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166108d85747808211156108485760405162461bcd60e51b8152600401610803906137a9565b60008373ffffffffffffffffffffffffffffffffffffffff168360405161086e906135f5565b60006040518083038185875af1925050503d80600081146108ab576040519150601f19603f3d011682016040523d82523d6000602084013e6108b0565b606091505b50509050806108d15760405162461bcd60e51b81526004016108039061373b565b50506109c2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8516906370a082319061092d9030906004016135f8565b60206040518083038186803b15801561094557600080fd5b505afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d9190613589565b90508082111561099f5760405162461bcd60e51b81526004016108039061383d565b6109c073ffffffffffffffffffffffffffffffffffffffff851684846123b1565b505b505050565b336109d06117f7565b73ffffffffffffffffffffffffffffffffffffffff1614610a10576109f433611365565b610a105760405162461bcd60e51b815260040161080390613672565b606780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b33610a606117f7565b73ffffffffffffffffffffffffffffffffffffffff1614610aa057610a8433611365565b610aa05760405162461bcd60e51b815260040161080390613672565b60026000541415610af8576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260008190555060008173ffffffffffffffffffffffffffffffffffffffff1661271034604051610b29906135f5565b600060405180830381858888f193505050503d8060008114610b67576040519150601f19603f3d011682016040523d82523d6000602084013e610b6c565b606091505b5050905080610bb957604051349073ffffffffffffffffffffffffffffffffffffffff8416907f2c7a964ca3de5ec1d42d9822f9bbd0eb142a59cc9f855e9d93813b773192c7a390600090a35b6066546040517f987fa2d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063987fa2d590610c1b908c908c908c908c908c908c908c90600401613ab9565b600060405180830381600087803b158015610c3557600080fd5b505af1158015610c49573d6000803e3d6000fd5b505060016000555050505050505050505050565b60696020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b33610cd46117f7565b73ffffffffffffffffffffffffffffffffffffffff1614610d1457610cf833611365565b610d145760405162461bcd60e51b815260040161080390613672565b60026000541415610d6c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556066546040517f987fa2d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063987fa2d590610dd3908a908a908a908a908a908a908a90600401613ab9565b600060405180830381600087803b158015610ded57600080fd5b505af1158015610e01573d6000803e3d6000fd5b50506001600055505050505050505050565b60705473ffffffffffffffffffffffffffffffffffffffff1681565b60715473ffffffffffffffffffffffffffffffffffffffff1681565b33610e546117f7565b73ffffffffffffffffffffffffffffffffffffffff1614610e9457610e7833611365565b610e945760405162461bcd60e51b815260040161080390613672565b604080516060810182526fffffffffffffffffffffffffffffffff858116825267ffffffffffffffff858116602080850191825286831685870190815261ffff8c8116600090815260698452888120918d16815292529086902094518554925191517fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169416939093177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000938316939093029290921777ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009290911691909102179055517fd053e021dda81c7c2794ff89e320caea5379962d49ed383a3bd0a54ffc4b932f90610fd49087908790879087908790613b43565b60405180910390a15050505050565b61271081565b606d602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b606e602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b61103961243e565b73ffffffffffffffffffffffffffffffffffffffff166110576117f7565b73ffffffffffffffffffffffffffffffffffffffff16146110bf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152606a60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831515179055517fb10786d0bfa68fb1aa29552d9203e5f545f7c073ff0784da1de1d800986f102390611140908490849061363f565b60405180910390a15050565b60665460009073ffffffffffffffffffffffffffffffffffffffff1633146111865760405162461bcd60e51b81526004016108039061389a565b6127108411156111a85760405162461bcd60e51b815260040161080390613965565b60715473ffffffffffffffffffffffffffffffffffffffff868116911614156112ba5760008461022014806111de575084610140145b806111ea575084610120145b806111f557508460a0145b9050806112b857607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b60b4256040518163ffffffff1660e01b815260040160206040518083038186803b15801561126457600080fd5b505afa158015611278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129c9190613248565b6112b85760405162461bcd60e51b8152600401610803906138d1565b505b6112fd8787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061244292505050565b90507fdf21c415b78ed2552cc9971249e32a053abce6087a0ae0fbf3f78db5174a34938160405161132e9190613ba9565b60405180910390a19695505050505050565b606b5460ff1681565b60675473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606a602052604090205460ff165b919050565b606c547201000000000000000000000000000000000000900461ffff1681565b60665473ffffffffffffffffffffffffffffffffffffffff1681565b6113d861243e565b73ffffffffffffffffffffffffffffffffffffffff166113f66117f7565b73ffffffffffffffffffffffffffffffffffffffff161461145e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60345460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b336114d66117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611516576114fa33611365565b6115165760405162461bcd60e51b815260040161080390613672565b606b805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b606b54610100900473ffffffffffffffffffffffffffffffffffffffff1681565b61158b613017565b606b546040517fda26663a000000000000000000000000000000000000000000000000000000008152600091610100900473ffffffffffffffffffffffffffffffffffffffff169063da26663a906115e7908690600401613aaa565b60606040518083038186803b1580156115ff57600080fd5b505afa158015611613573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116379190613264565b6040805180820190915281516fffffffffffffffffffffffffffffffff16815260209182015167ffffffffffffffff16918101919091529392505050565b61167d61243e565b73ffffffffffffffffffffffffffffffffffffffff1661169b6117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611703576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152606f60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831515179055517fde6b048d6c4e63d85fde37ccbe03f4380c6d12cb2a1e9ce9268bbf47a1ef687890611140908490849061363f565b606c5474010000000000000000000000000000000000000000900461ffff1681565b606f6020526000908152604090205460ff1681565b6068602052600090815260409020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b60345473ffffffffffffffffffffffffffffffffffffffff1690565b606c54700100000000000000000000000000000000900461ffff1681565b60725481565b606c546fffffffffffffffffffffffffffffffff1681565b336118586117f7565b73ffffffffffffffffffffffffffffffffffffffff16146109c25761187c33611365565b6109c25760405162461bcd60e51b815260040161080390613672565b6118a061243e565b73ffffffffffffffffffffffffffffffffffffffff166118be6117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611926576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b336119606117f7565b73ffffffffffffffffffffffffffffffffffffffff16141580156119945750336000908152606a602052604090205460ff16155b156119c857336000908152606f602052604090205460ff166119c85760405162461bcd60e51b815260040161080390613806565b60005b818110156109c257368383838181106119e057fe5b90506040020190508060200160208101906119fb91906132d7565b606d6000611a0c60208501856132f3565b61ffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055506001016119cb565b6000612710841115611a8c5760405162461bcd60e51b8152600401610803906136a9565b611acf8787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061244292505050565b979650505050505050565b33611ae36117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611b2357611b0733611365565b611b235760405162461bcd60e51b815260040161080390613672565b606c80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b33611b6f6117f7565b73ffffffffffffffffffffffffffffffffffffffff1614158015611ba35750336000908152606a602052604090205460ff16155b15611bd757336000908152606f602052604090205460ff16611bd75760405162461bcd60e51b815260040161080390613806565b60005b818110156109c25736838383818110611bef57fe5b9050604002019050806020016020810190611c0a91906132d7565b606e6000611c1b60208501856132f3565b61ffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905550600101611bda565b6000611c81612765565b905073ffffffffffffffffffffffffffffffffffffffff8116611cda5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355611cfc565b3373ffffffffffffffffffffffffffffffffffffffff821614611cfc57600080fd5b506071805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556070805493909416921691909117909155607255565b606a6020526000908152604090205460ff1681565b611d7461243e565b73ffffffffffffffffffffffffffffffffffffffff16611d926117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611dfa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116611e4c5760405162461bcd60e51b8152600401808060200182810382526026815260200180613c176026913960400191505060405180910390fd5b60345460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000611ee4612765565b905073ffffffffffffffffffffffffffffffffffffffff8116611f3d5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355611f5f565b3373ffffffffffffffffffffffffffffffffffffffff821614611f5f57600080fd5b600154610100900460ff1680611f785750611f7861278a565b80611f86575060015460ff16155b611fc15760405162461bcd60e51b815260040180806020018281038252602e815260200180613c63602e913960400191505060405180910390fd5b600154610100900460ff1615801561202657600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b61202e61279b565b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8916179055612079306001611031565b606c8054606b80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8b81169190910291909117909155612ee07fffffffffffffffffffffffffffffffff00000000000000000000000000000000909216919091177fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff1670a400000000000000000000000000000000177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff1672a0000000000000000000000000000000000000177fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501f4000000000000000000000000000000000000000017909155607180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811688841617909155607080549091169186169190911790556072839055801561221057600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050505050565b336122226117f7565b73ffffffffffffffffffffffffffffffffffffffff16146122625761224633611365565b6122625760405162461bcd60e51b815260040161080390613672565b6066546040517f69412bfa00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906369412bfa906122b99030906004016135f8565b60206040518083038186803b1580156122d157600080fd5b505afa1580156122e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123099190613589565b90508082111561232b5760405162461bcd60e51b81526004016108039061383d565b6066546040517f07b18bde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906307b18bde906123839086908690600401613619565b600060405180830381600087803b15801561239d57600080fd5b505af1158015612210573d6000803e3d6000fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109c29084906128a4565b3390565b606b5460009060ff16156124685760405162461bcd60e51b81526004016108039061392e565b815160221480612479575060428251115b6124955760405162461bcd60e51b8152600401610803906136de565b60028201516022830151806124bc5760405162461bcd60e51b81526004016108039061399c565b8161ffff16600114806124d357508161ffff166002145b6124ef5760405162461bcd60e51b815260040161080390613772565b61ffff88811660009081526069602090815260408083208b85168452909152812091841660021461253a57606c54700100000000000000000000000000000000900461ffff16612560565b606c5461256090700100000000000000000000000000000000900461ffff166020612962565b905060008961ffff1660021461259f57606c5461259a90899074010000000000000000000000000000000000000000900461ffff16612962565b6125c7565b606c546125c79089907201000000000000000000000000000000000000900461ffff16612962565b606b549091508b90600090819081908190610100900473ffffffffffffffffffffffffffffffffffffffff166388a4124c866126038a8a612962565b8b5461262d90700100000000000000000000000000000000900467ffffffffffffffff168e612962565b6040518463ffffffff1660e01b815260040161264b93929190613b8d565b60806040518083038186803b15801561266357600080fd5b505afa158015612677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269b91906135a1565b935093509350935060008a61ffff16600214156126eb575060428c015188546fffffffffffffffffffffffffffffffff168111156126eb5760405162461bcd60e51b8152600401610803906139d3565b6000811561273957606c54612736906127109061272a906fffffffffffffffffffffffffffffffff908116906127309089811690849089908d166129c5565b90612a1e565b906129c5565b90505b61274e81612748898987612a85565b90612962565b9c5050505050505050505050505095945050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b600061279530612b74565b15905090565b600154610100900460ff16806127b457506127b461278a565b806127c2575060015460ff16155b6127fd5760405162461bcd60e51b815260040180806020018281038252602e815260200180613c63602e913960400191505060405180910390fd5b600154610100900460ff1615801561286257600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b61286a612b7a565b612872612c71565b80156128a157600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b6000612906826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612de69092919063ffffffff16565b8051909150156109c25780806020019051602081101561292557600080fd5b50516109c25760405162461bcd60e51b815260040180806020018281038252602a815260200180613cb2602a913960400191505060405180910390fd5b6000828201838110156129bc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826129d4575060006129bf565b828202828482816129e157fe5b04146129bc5760405162461bcd60e51b8152600401808060200182810382526021815260200180613c916021913960400191505060405180910390fd5b6000808211612a74576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612a7d57fe5b049392505050565b61ffff83166000908152606d60205260408120546fffffffffffffffffffffffffffffffff1680612ac75750606c546fffffffffffffffffffffffffffffffff165b6000612aeb61271061272a876fffffffffffffffffffffffffffffffff86166129c5565b90506fffffffffffffffffffffffffffffffff8416612b0d579150612b6d9050565b60725461ffff87166000908152606e60205260408120549091612b5691612b4f916fffffffffffffffffffffffffffffffff808a169261272a929116906129c5565b8790612962565b9050818111612b655781612b67565b805b93505050505b9392505050565b3b151590565b600154610100900460ff1680612b935750612b9361278a565b80612ba1575060015460ff16155b612bdc5760405162461bcd60e51b815260040180806020018281038252602e815260200180613c63602e913960400191505060405180910390fd5b600154610100900460ff1615801561287257600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90911661010017168117905580156128a157600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600154610100900460ff1680612c8a5750612c8a61278a565b80612c98575060015460ff16155b612cd35760405162461bcd60e51b815260040180806020018281038252602e815260200180613c63602e913960400191505060405180910390fd5b600154610100900460ff16158015612d3857600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b6000612d4261243e565b603480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156128a157600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b6060612df58484600085612dfd565b949350505050565b606082471015612e3e5760405162461bcd60e51b8152600401808060200182810382526026815260200180613c3d6026913960400191505060405180910390fd5b612e4785612b74565b612e98576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612f0157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612ec4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f63576040519150601f19603f3d011682016040523d82523d6000602084013e612f68565b606091505b5091509150611acf82828660608315612f82575081612b6d565b825115612f925782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fdc578181015183820152602001612fc4565b50505050905090810190601f1680156130095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604080518082019091526000808252602082015290565b60008083601f84011261303f578182fd5b50813567ffffffffffffffff811115613056578182fd5b60208301915083602060408302850101111561307157600080fd5b9250929050565b60008083601f840112613089578182fd5b50813567ffffffffffffffff8111156130a0578182fd5b60208301915083602082850101111561307157600080fd5b803561ffff8116811461138f57600080fd5b6000602082840312156130db578081fd5b81356129bc81613bb2565b600080604083850312156130f8578081fd5b823561310381613bb2565b946020939093013593505050565b600080600080600060a08688031215613128578081fd5b853561313381613bb2565b9450602086013561314381613bb2565b9350604086013561315381613bb2565b9250606086013561316381613bb2565b949793965091946080013592915050565b600080600060608486031215613188578283fd5b833561319381613bb2565b925060208401356131a381613bb2565b929592945050506040919091013590565b600080604083850312156131c6578182fd5b82356131d181613bb2565b915060208301356131e181613bd4565b809150509250929050565b600080602083850312156131fe578182fd5b823567ffffffffffffffff811115613214578283fd5b6132208582860161302e565b90969095509350505050565b60006020828403121561323d578081fd5b81356129bc81613bd4565b600060208284031215613259578081fd5b81516129bc81613bd4565b600060608284031215613275578081fd5b6040516060810181811067ffffffffffffffff8211171561329257fe5b60405282516132a081613be2565b815260208301516132b081613c00565b6020820152604083015163ffffffff811681146132cb578283fd5b60408201529392505050565b6000602082840312156132e8578081fd5b81356129bc81613be2565b600060208284031215613304578081fd5b612b6d826130b8565b600080600080600080600060c0888a031215613327578485fd5b613330886130b8565b9650602088013561334081613bb2565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115613370578283fd5b61337c8a828b01613078565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156133aa578182fd5b6133b3896130b8565b975060208901356133c381613bb2565b965060408901359550606089013594506080890135935060a089013567ffffffffffffffff8111156133f3578283fd5b6133ff8b828c01613078565b90945092505060c089013561341381613bb2565b809150509295985092959890939650565b600080600060608486031215613438578081fd5b613441846130b8565b9250602084013561345181613be2565b9150604084013561346181613be2565b809150509250925092565b6000806040838503121561347e578182fd5b613487836130b8565b9150613495602084016130b8565b90509250929050565b60008060008060008060a087890312156134b6578384fd5b6134bf876130b8565b95506134cd602088016130b8565b945060408701356134dd81613bb2565b935060608701359250608087013567ffffffffffffffff8111156134ff578283fd5b61350b89828a01613078565b979a9699509497509295939492505050565b600080600080600060a08688031215613534578283fd5b61353d866130b8565b945061354b602087016130b8565b9350604086013561355b81613be2565b9250606086013561356b81613c00565b9150608086013561357b81613c00565b809150509295509295909350565b60006020828403121561359a578081fd5b5051919050565b600080600080608085870312156135b6578182fd5b8451935060208501516135c881613be2565b60408601519093506135d981613be2565b60608601519092506135ea81613be2565b939692955090935050565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9290921682521515602082015260400190565b901515815260200190565b60208082526015908201527f52656c617965723a206e6f7420617070726f7665640000000000000000000000604082015260600190565b6020808252818101527f52656c617965723a205f7061796c6f616453697a6520746f6f6f6f6f20626967604082015260600190565b60208082526026908201527f52656c617965723a2077726f6e67205f61646170746572506172616d6574657260408201527f732073697a650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f52656c617965723a206661696c656420746f2073656e64206574686572000000604082015260600190565b6020808252601b908201527f52656c617965723a20756e737570706f72746564207478547970650000000000604082015260600190565b6020808252602d908201527f52656c617965723a206e6f7420656e6f756768206e617469766520666565206660408201527f6f72207769746864726177616c00000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a206e6f742075706461746572000000000000000000000000604082015260600190565b60208082526026908201527f52656c617965723a206e6f7420656e6f7567682066656520666f72207769746860408201527f64726177616c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a20696e76616c696420756c6e000000000000000000000000604082015260600190565b60208082526029908201527f52656c617965723a20737461726761746520636f6d706f736572206973206e6f60408201527f742073656e64696e670000000000000000000000000000000000000000000000606082015260800190565b6020808252600d908201527f41646d696e3a2070617573656400000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f52656c617965723a205f7061796c6f616453697a65203e203130303030000000604082015260600190565b60208082526014908201527f52656c617965723a2067617320746f6f206c6f77000000000000000000000000604082015260600190565b6020808252601f908201527f52656c617965723a206473744e6174697665416d7420746f6f206c6172676500604082015260600190565b81516fffffffffffffffffffffffffffffffff9081168252602092830151169181019190915260400190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff93909316835267ffffffffffffffff918216602084015216604082015260600190565b61ffff91909116815260200190565b600061ffff8916825273ffffffffffffffffffffffffffffffffffffffff8816602083015286604083015285606083015284608083015260c060a08301528260c0830152828460e084013781830160e090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019695505050505050565b61ffff95861681529390941660208401526fffffffffffffffffffffffffffffffff91909116604083015267ffffffffffffffff9081166060830152909116608082015260a00190565b61ffff9390931683526020830191909152604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff811681146128a157600080fd5b80151581146128a157600080fd5b6fffffffffffffffffffffffffffffffff811681146128a157600080fd5b67ffffffffffffffff811681146128a157600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220ddd7c05ecdb9b7e13b86cf6983400e0626d4c83cbeee5fdf91799e56a20588e864736f6c63430007060033",
  "deployedBytecode": "0x6080604052600436106102c65760003560e01c8063741bef1a11610179578063b8f8bad4116100d6578063d5f8b0141161008a578063f2fde38b11610064578063f2fde38b1461075a578063f7013ef61461077a578063fd9be5221461079a576102c6565b8063d5f8b014146106fa578063efbf196a1461071a578063f136a8741461073a576102c6565b8063bf4dab51116100bb578063bf4dab511461069a578063c03f1529146106ba578063c3b04e7f146106da576102c6565b8063b8f8bad41461065a578063bedb86fb1461067a576102c6565b80638644c5781161012d57806398dabd501161011257806398dabd501461061b5780639e8c717814610630578063ac353e0414610645576102c6565b80638644c578146105d85780638da5cb5b14610606576102c6565b8063801db1fe1161015e578063801db1fe1461058357806381ba209a146105a35780638576db67146105b8576102c6565b8063741bef1a14610541578063765a8a5414610556576102c6565b806355b3524911610227578063673448dd116101db5780636c473aff116101c05780636c473aff146104f7578063715018a61461050c578063724e78da14610521576102c6565b8063673448dd146104b557806369cf4e3a146104d5576102c6565b80635886ea651161020c5780635886ea651461045e5780635c975abb1461047e5780636348d269146104a0576102c6565b806355b352491461041e578063575765e21461043e576102c6565b80633352b6081161027e5780633f103487116102635780633f103487146103af57806343b9a0c4146103cf5780634eeba250146103f1576102c6565b80633352b608146103785780633bfb40471461039a576102c6565b80630508941e116102af5780630508941e1461030d57806323161ff814610320578063252f7b0114610358576102c6565b806301e33667146102cb57806303343f54146102ed575b600080fd5b3480156102d757600080fd5b506102eb6102e6366004613174565b6107ba565b005b3480156102f957600080fd5b506102eb6103083660046130ca565b6109c7565b6102eb61031b36600461338f565b610a57565b34801561032c57600080fd5b5061034061033b36600461346c565b610c5d565b60405161034f93929190613a76565b60405180910390f35b34801561036457600080fd5b506102eb61037336600461330d565b610ccb565b34801561038457600080fd5b5061038d610e13565b60405161034f91906135f8565b3480156103a657600080fd5b5061038d610e2f565b3480156103bb57600080fd5b506102eb6103ca36600461351d565b610e4b565b3480156103db57600080fd5b506103e4610fe3565b60405161034f9190613ba9565b3480156103fd57600080fd5b5061041161040c3660046132f3565b610fe9565b60405161034f9190613a36565b34801561042a57600080fd5b506104116104393660046132f3565b61100d565b34801561044a57600080fd5b506102eb6104593660046131b4565b611031565b34801561046a57600080fd5b506103e461047936600461349e565b61114c565b34801561048a57600080fd5b50610493611340565b60405161034f9190613667565b3480156104ac57600080fd5b5061038d611349565b3480156104c157600080fd5b506104936104d03660046130ca565b611365565b3480156104e157600080fd5b506104ea611394565b60405161034f9190613aaa565b34801561050357600080fd5b5061038d6113b4565b34801561051857600080fd5b506102eb6113d0565b34801561052d57600080fd5b506102eb61053c3660046130ca565b6114cd565b34801561054d57600080fd5b5061038d611562565b34801561056257600080fd5b506105766105713660046132f3565b611583565b60405161034f9190613a0a565b34801561058f57600080fd5b506102eb61059e3660046131b4565b611675565b3480156105af57600080fd5b506104ea611784565b3480156105c457600080fd5b506104936105d33660046130ca565b6117a6565b3480156105e457600080fd5b506105f86105f33660046132f3565b6117bb565b60405161034f929190613a53565b34801561061257600080fd5b5061038d6117f7565b34801561062757600080fd5b506104ea611813565b34801561063c57600080fd5b506103e4611831565b34801561065157600080fd5b50610411611837565b34801561066657600080fd5b506102eb610675366004613424565b61184f565b34801561068657600080fd5b506102eb61069536600461322c565b611898565b3480156106a657600080fd5b506102eb6106b53660046131ec565b611957565b3480156106c657600080fd5b506103e46106d536600461349e565b611a68565b3480156106e657600080fd5b506102eb6106f53660046132d7565b611ada565b34801561070657600080fd5b506102eb6107153660046131ec565b611b66565b34801561072657600080fd5b506102eb610735366004613174565b611c77565b34801561074657600080fd5b506104936107553660046130ca565b611d57565b34801561076657600080fd5b506102eb6107753660046130ca565b611d6c565b34801561078657600080fd5b506102eb610795366004613111565b611eda565b3480156107a657600080fd5b506102eb6107b53660046130e6565b612219565b336107c36117f7565b73ffffffffffffffffffffffffffffffffffffffff161461080c576107e733611365565b61080c5760405162461bcd60e51b815260040161080390613672565b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff83166108d85747808211156108485760405162461bcd60e51b8152600401610803906137a9565b60008373ffffffffffffffffffffffffffffffffffffffff168360405161086e906135f5565b60006040518083038185875af1925050503d80600081146108ab576040519150601f19603f3d011682016040523d82523d6000602084013e6108b0565b606091505b50509050806108d15760405162461bcd60e51b81526004016108039061373b565b50506109c2565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815260009073ffffffffffffffffffffffffffffffffffffffff8516906370a082319061092d9030906004016135f8565b60206040518083038186803b15801561094557600080fd5b505afa158015610959573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097d9190613589565b90508082111561099f5760405162461bcd60e51b81526004016108039061383d565b6109c073ffffffffffffffffffffffffffffffffffffffff851684846123b1565b505b505050565b336109d06117f7565b73ffffffffffffffffffffffffffffffffffffffff1614610a10576109f433611365565b610a105760405162461bcd60e51b815260040161080390613672565b606780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b33610a606117f7565b73ffffffffffffffffffffffffffffffffffffffff1614610aa057610a8433611365565b610aa05760405162461bcd60e51b815260040161080390613672565b60026000541415610af8576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b600260008190555060008173ffffffffffffffffffffffffffffffffffffffff1661271034604051610b29906135f5565b600060405180830381858888f193505050503d8060008114610b67576040519150601f19603f3d011682016040523d82523d6000602084013e610b6c565b606091505b5050905080610bb957604051349073ffffffffffffffffffffffffffffffffffffffff8416907f2c7a964ca3de5ec1d42d9822f9bbd0eb142a59cc9f855e9d93813b773192c7a390600090a35b6066546040517f987fa2d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063987fa2d590610c1b908c908c908c908c908c908c908c90600401613ab9565b600060405180830381600087803b158015610c3557600080fd5b505af1158015610c49573d6000803e3d6000fd5b505060016000555050505050505050505050565b60696020908152600092835260408084209091529082529020546fffffffffffffffffffffffffffffffff81169067ffffffffffffffff7001000000000000000000000000000000008204811691780100000000000000000000000000000000000000000000000090041683565b33610cd46117f7565b73ffffffffffffffffffffffffffffffffffffffff1614610d1457610cf833611365565b610d145760405162461bcd60e51b815260040161080390613672565b60026000541415610d6c576040805162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015290519081900360640190fd5b60026000556066546040517f987fa2d500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063987fa2d590610dd3908a908a908a908a908a908a908a90600401613ab9565b600060405180830381600087803b158015610ded57600080fd5b505af1158015610e01573d6000803e3d6000fd5b50506001600055505050505050505050565b60705473ffffffffffffffffffffffffffffffffffffffff1681565b60715473ffffffffffffffffffffffffffffffffffffffff1681565b33610e546117f7565b73ffffffffffffffffffffffffffffffffffffffff1614610e9457610e7833611365565b610e945760405162461bcd60e51b815260040161080390613672565b604080516060810182526fffffffffffffffffffffffffffffffff858116825267ffffffffffffffff858116602080850191825286831685870190815261ffff8c8116600090815260698452888120918d16815292529086902094518554925191517fffffffffffffffffffffffffffffffff000000000000000000000000000000009093169416939093177fffffffffffffffff0000000000000000ffffffffffffffffffffffffffffffff16700100000000000000000000000000000000938316939093029290921777ffffffffffffffffffffffffffffffffffffffffffffffff1678010000000000000000000000000000000000000000000000009290911691909102179055517fd053e021dda81c7c2794ff89e320caea5379962d49ed383a3bd0a54ffc4b932f90610fd49087908790879087908790613b43565b60405180910390a15050505050565b61271081565b606d602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b606e602052600090815260409020546fffffffffffffffffffffffffffffffff1681565b61103961243e565b73ffffffffffffffffffffffffffffffffffffffff166110576117f7565b73ffffffffffffffffffffffffffffffffffffffff16146110bf576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152606a60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831515179055517fb10786d0bfa68fb1aa29552d9203e5f545f7c073ff0784da1de1d800986f102390611140908490849061363f565b60405180910390a15050565b60665460009073ffffffffffffffffffffffffffffffffffffffff1633146111865760405162461bcd60e51b81526004016108039061389a565b6127108411156111a85760405162461bcd60e51b815260040161080390613965565b60715473ffffffffffffffffffffffffffffffffffffffff868116911614156112ba5760008461022014806111de575084610140145b806111ea575084610120145b806111f557508460a0145b9050806112b857607060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634b60b4256040518163ffffffff1660e01b815260040160206040518083038186803b15801561126457600080fd5b505afa158015611278573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061129c9190613248565b6112b85760405162461bcd60e51b8152600401610803906138d1565b505b6112fd8787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061244292505050565b90507fdf21c415b78ed2552cc9971249e32a053abce6087a0ae0fbf3f78db5174a34938160405161132e9190613ba9565b60405180910390a19695505050505050565b606b5460ff1681565b60675473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff81166000908152606a602052604090205460ff165b919050565b606c547201000000000000000000000000000000000000900461ffff1681565b60665473ffffffffffffffffffffffffffffffffffffffff1681565b6113d861243e565b73ffffffffffffffffffffffffffffffffffffffff166113f66117f7565b73ffffffffffffffffffffffffffffffffffffffff161461145e576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b60345460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3603480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b336114d66117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611516576114fa33611365565b6115165760405162461bcd60e51b815260040161080390613672565b606b805473ffffffffffffffffffffffffffffffffffffffff909216610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff909216919091179055565b606b54610100900473ffffffffffffffffffffffffffffffffffffffff1681565b61158b613017565b606b546040517fda26663a000000000000000000000000000000000000000000000000000000008152600091610100900473ffffffffffffffffffffffffffffffffffffffff169063da26663a906115e7908690600401613aaa565b60606040518083038186803b1580156115ff57600080fd5b505afa158015611613573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116379190613264565b6040805180820190915281516fffffffffffffffffffffffffffffffff16815260209182015167ffffffffffffffff16918101919091529392505050565b61167d61243e565b73ffffffffffffffffffffffffffffffffffffffff1661169b6117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611703576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152606f60205260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016831515179055517fde6b048d6c4e63d85fde37ccbe03f4380c6d12cb2a1e9ce9268bbf47a1ef687890611140908490849061363f565b606c5474010000000000000000000000000000000000000000900461ffff1681565b606f6020526000908152604090205460ff1681565b6068602052600090815260409020546fffffffffffffffffffffffffffffffff8082169170010000000000000000000000000000000090041682565b60345473ffffffffffffffffffffffffffffffffffffffff1690565b606c54700100000000000000000000000000000000900461ffff1681565b60725481565b606c546fffffffffffffffffffffffffffffffff1681565b336118586117f7565b73ffffffffffffffffffffffffffffffffffffffff16146109c25761187c33611365565b6109c25760405162461bcd60e51b815260040161080390613672565b6118a061243e565b73ffffffffffffffffffffffffffffffffffffffff166118be6117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611926576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b606b80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b336119606117f7565b73ffffffffffffffffffffffffffffffffffffffff16141580156119945750336000908152606a602052604090205460ff16155b156119c857336000908152606f602052604090205460ff166119c85760405162461bcd60e51b815260040161080390613806565b60005b818110156109c257368383838181106119e057fe5b90506040020190508060200160208101906119fb91906132d7565b606d6000611a0c60208501856132f3565b61ffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055506001016119cb565b6000612710841115611a8c5760405162461bcd60e51b8152600401610803906136a9565b611acf8787878787878080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061244292505050565b979650505050505050565b33611ae36117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611b2357611b0733611365565b611b235760405162461bcd60e51b815260040161080390613672565b606c80547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055565b33611b6f6117f7565b73ffffffffffffffffffffffffffffffffffffffff1614158015611ba35750336000908152606a602052604090205460ff16155b15611bd757336000908152606f602052604090205460ff16611bd75760405162461bcd60e51b815260040161080390613806565b60005b818110156109c25736838383818110611bef57fe5b9050604002019050806020016020810190611c0a91906132d7565b606e6000611c1b60208501856132f3565b61ffff168152602081019190915260400160002080547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905550600101611bda565b6000611c81612765565b905073ffffffffffffffffffffffffffffffffffffffff8116611cda5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355611cfc565b3373ffffffffffffffffffffffffffffffffffffffff821614611cfc57600080fd5b506071805473ffffffffffffffffffffffffffffffffffffffff9485167fffffffffffffffffffffffff0000000000000000000000000000000000000000918216179091556070805493909416921691909117909155607255565b606a6020526000908152604090205460ff1681565b611d7461243e565b73ffffffffffffffffffffffffffffffffffffffff16611d926117f7565b73ffffffffffffffffffffffffffffffffffffffff1614611dfa576040805162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015290519081900360640190fd5b73ffffffffffffffffffffffffffffffffffffffff8116611e4c5760405162461bcd60e51b8152600401808060200182810382526026815260200180613c176026913960400191505060405180910390fd5b60345460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3603480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6000611ee4612765565b905073ffffffffffffffffffffffffffffffffffffffff8116611f3d5773ffffffffffffffffffffffffffffffffffffffff7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d610355611f5f565b3373ffffffffffffffffffffffffffffffffffffffff821614611f5f57600080fd5b600154610100900460ff1680611f785750611f7861278a565b80611f86575060015460ff16155b611fc15760405162461bcd60e51b815260040180806020018281038252602e815260200180613c63602e913960400191505060405180910390fd5b600154610100900460ff1615801561202657600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b61202e61279b565b606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8916179055612079306001611031565b606c8054606b80547fffffffffffffffffffffff0000000000000000000000000000000000000000ff1661010073ffffffffffffffffffffffffffffffffffffffff8b81169190910291909117909155612ee07fffffffffffffffffffffffffffffffff00000000000000000000000000000000909216919091177fffffffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffff1670a400000000000000000000000000000000177fffffffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffff1672a0000000000000000000000000000000000000177fffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff167501f4000000000000000000000000000000000000000017909155607180547fffffffffffffffffffffffff000000000000000000000000000000000000000090811688841617909155607080549091169186169190911790556072839055801561221057600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50505050505050565b336122226117f7565b73ffffffffffffffffffffffffffffffffffffffff16146122625761224633611365565b6122625760405162461bcd60e51b815260040161080390613672565b6066546040517f69412bfa00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff16906369412bfa906122b99030906004016135f8565b60206040518083038186803b1580156122d157600080fd5b505afa1580156122e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123099190613589565b90508082111561232b5760405162461bcd60e51b81526004016108039061383d565b6066546040517f07b18bde00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff909116906307b18bde906123839086908690600401613619565b600060405180830381600087803b15801561239d57600080fd5b505af1158015612210573d6000803e3d6000fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526109c29084906128a4565b3390565b606b5460009060ff16156124685760405162461bcd60e51b81526004016108039061392e565b815160221480612479575060428251115b6124955760405162461bcd60e51b8152600401610803906136de565b60028201516022830151806124bc5760405162461bcd60e51b81526004016108039061399c565b8161ffff16600114806124d357508161ffff166002145b6124ef5760405162461bcd60e51b815260040161080390613772565b61ffff88811660009081526069602090815260408083208b85168452909152812091841660021461253a57606c54700100000000000000000000000000000000900461ffff16612560565b606c5461256090700100000000000000000000000000000000900461ffff166020612962565b905060008961ffff1660021461259f57606c5461259a90899074010000000000000000000000000000000000000000900461ffff16612962565b6125c7565b606c546125c79089907201000000000000000000000000000000000000900461ffff16612962565b606b549091508b90600090819081908190610100900473ffffffffffffffffffffffffffffffffffffffff166388a4124c866126038a8a612962565b8b5461262d90700100000000000000000000000000000000900467ffffffffffffffff168e612962565b6040518463ffffffff1660e01b815260040161264b93929190613b8d565b60806040518083038186803b15801561266357600080fd5b505afa158015612677573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061269b91906135a1565b935093509350935060008a61ffff16600214156126eb575060428c015188546fffffffffffffffffffffffffffffffff168111156126eb5760405162461bcd60e51b8152600401610803906139d3565b6000811561273957606c54612736906127109061272a906fffffffffffffffffffffffffffffffff908116906127309089811690849089908d166129c5565b90612a1e565b906129c5565b90505b61274e81612748898987612a85565b90612962565b9c5050505050505050505050505095945050505050565b7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b600061279530612b74565b15905090565b600154610100900460ff16806127b457506127b461278a565b806127c2575060015460ff16155b6127fd5760405162461bcd60e51b815260040180806020018281038252602e815260200180613c63602e913960400191505060405180910390fd5b600154610100900460ff1615801561286257600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b61286a612b7a565b612872612c71565b80156128a157600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b50565b6000612906826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612de69092919063ffffffff16565b8051909150156109c25780806020019051602081101561292557600080fd5b50516109c25760405162461bcd60e51b815260040180806020018281038252602a815260200180613cb2602a913960400191505060405180910390fd5b6000828201838110156129bc576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b90505b92915050565b6000826129d4575060006129bf565b828202828482816129e157fe5b04146129bc5760405162461bcd60e51b8152600401808060200182810382526021815260200180613c916021913960400191505060405180910390fd5b6000808211612a74576040805162461bcd60e51b815260206004820152601a60248201527f536166654d6174683a206469766973696f6e206279207a65726f000000000000604482015290519081900360640190fd5b818381612a7d57fe5b049392505050565b61ffff83166000908152606d60205260408120546fffffffffffffffffffffffffffffffff1680612ac75750606c546fffffffffffffffffffffffffffffffff165b6000612aeb61271061272a876fffffffffffffffffffffffffffffffff86166129c5565b90506fffffffffffffffffffffffffffffffff8416612b0d579150612b6d9050565b60725461ffff87166000908152606e60205260408120549091612b5691612b4f916fffffffffffffffffffffffffffffffff808a169261272a929116906129c5565b8790612962565b9050818111612b655781612b67565b805b93505050505b9392505050565b3b151590565b600154610100900460ff1680612b935750612b9361278a565b80612ba1575060015460ff16155b612bdc5760405162461bcd60e51b815260040180806020018281038252602e815260200180613c63602e913960400191505060405180910390fd5b600154610100900460ff1615801561287257600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff90911661010017168117905580156128a157600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b600154610100900460ff1680612c8a5750612c8a61278a565b80612c98575060015460ff16155b612cd35760405162461bcd60e51b815260040180806020018281038252602e815260200180613c63602e913960400191505060405180910390fd5b600154610100900460ff16158015612d3857600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff9091166101001716811790555b6000612d4261243e565b603480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35080156128a157600180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff16905550565b6060612df58484600085612dfd565b949350505050565b606082471015612e3e5760405162461bcd60e51b8152600401808060200182810382526026815260200180613c3d6026913960400191505060405180910390fd5b612e4785612b74565b612e98576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040518082805190602001908083835b60208310612f0157805182527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09092019160209182019101612ec4565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114612f63576040519150601f19603f3d011682016040523d82523d6000602084013e612f68565b606091505b5091509150611acf82828660608315612f82575081612b6d565b825115612f925782518084602001fd5b8160405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015612fdc578181015183820152602001612fc4565b50505050905090810190601f1680156130095780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b604080518082019091526000808252602082015290565b60008083601f84011261303f578182fd5b50813567ffffffffffffffff811115613056578182fd5b60208301915083602060408302850101111561307157600080fd5b9250929050565b60008083601f840112613089578182fd5b50813567ffffffffffffffff8111156130a0578182fd5b60208301915083602082850101111561307157600080fd5b803561ffff8116811461138f57600080fd5b6000602082840312156130db578081fd5b81356129bc81613bb2565b600080604083850312156130f8578081fd5b823561310381613bb2565b946020939093013593505050565b600080600080600060a08688031215613128578081fd5b853561313381613bb2565b9450602086013561314381613bb2565b9350604086013561315381613bb2565b9250606086013561316381613bb2565b949793965091946080013592915050565b600080600060608486031215613188578283fd5b833561319381613bb2565b925060208401356131a381613bb2565b929592945050506040919091013590565b600080604083850312156131c6578182fd5b82356131d181613bb2565b915060208301356131e181613bd4565b809150509250929050565b600080602083850312156131fe578182fd5b823567ffffffffffffffff811115613214578283fd5b6132208582860161302e565b90969095509350505050565b60006020828403121561323d578081fd5b81356129bc81613bd4565b600060208284031215613259578081fd5b81516129bc81613bd4565b600060608284031215613275578081fd5b6040516060810181811067ffffffffffffffff8211171561329257fe5b60405282516132a081613be2565b815260208301516132b081613c00565b6020820152604083015163ffffffff811681146132cb578283fd5b60408201529392505050565b6000602082840312156132e8578081fd5b81356129bc81613be2565b600060208284031215613304578081fd5b612b6d826130b8565b600080600080600080600060c0888a031215613327578485fd5b613330886130b8565b9650602088013561334081613bb2565b955060408801359450606088013593506080880135925060a088013567ffffffffffffffff811115613370578283fd5b61337c8a828b01613078565b989b979a50959850939692959293505050565b60008060008060008060008060e0898b0312156133aa578182fd5b6133b3896130b8565b975060208901356133c381613bb2565b965060408901359550606089013594506080890135935060a089013567ffffffffffffffff8111156133f3578283fd5b6133ff8b828c01613078565b90945092505060c089013561341381613bb2565b809150509295985092959890939650565b600080600060608486031215613438578081fd5b613441846130b8565b9250602084013561345181613be2565b9150604084013561346181613be2565b809150509250925092565b6000806040838503121561347e578182fd5b613487836130b8565b9150613495602084016130b8565b90509250929050565b60008060008060008060a087890312156134b6578384fd5b6134bf876130b8565b95506134cd602088016130b8565b945060408701356134dd81613bb2565b935060608701359250608087013567ffffffffffffffff8111156134ff578283fd5b61350b89828a01613078565b979a9699509497509295939492505050565b600080600080600060a08688031215613534578283fd5b61353d866130b8565b945061354b602087016130b8565b9350604086013561355b81613be2565b9250606086013561356b81613c00565b9150608086013561357b81613c00565b809150509295509295909350565b60006020828403121561359a578081fd5b5051919050565b600080600080608085870312156135b6578182fd5b8451935060208501516135c881613be2565b60408601519093506135d981613be2565b60608601519092506135ea81613be2565b939692955090935050565b90565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff9290921682521515602082015260400190565b901515815260200190565b60208082526015908201527f52656c617965723a206e6f7420617070726f7665640000000000000000000000604082015260600190565b6020808252818101527f52656c617965723a205f7061796c6f616453697a6520746f6f6f6f6f20626967604082015260600190565b60208082526026908201527f52656c617965723a2077726f6e67205f61646170746572506172616d6574657260408201527f732073697a650000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601d908201527f52656c617965723a206661696c656420746f2073656e64206574686572000000604082015260600190565b6020808252601b908201527f52656c617965723a20756e737570706f72746564207478547970650000000000604082015260600190565b6020808252602d908201527f52656c617965723a206e6f7420656e6f756768206e617469766520666565206660408201527f6f72207769746864726177616c00000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a206e6f742075706461746572000000000000000000000000604082015260600190565b60208082526026908201527f52656c617965723a206e6f7420656e6f7567682066656520666f72207769746860408201527f64726177616c0000000000000000000000000000000000000000000000000000606082015260800190565b60208082526014908201527f52656c617965723a20696e76616c696420756c6e000000000000000000000000604082015260600190565b60208082526029908201527f52656c617965723a20737461726761746520636f6d706f736572206973206e6f60408201527f742073656e64696e670000000000000000000000000000000000000000000000606082015260800190565b6020808252600d908201527f41646d696e3a2070617573656400000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f52656c617965723a205f7061796c6f616453697a65203e203130303030000000604082015260600190565b60208082526014908201527f52656c617965723a2067617320746f6f206c6f77000000000000000000000000604082015260600190565b6020808252601f908201527f52656c617965723a206473744e6174697665416d7420746f6f206c6172676500604082015260600190565b81516fffffffffffffffffffffffffffffffff9081168252602092830151169181019190915260400190565b6fffffffffffffffffffffffffffffffff91909116815260200190565b6fffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6fffffffffffffffffffffffffffffffff93909316835267ffffffffffffffff918216602084015216604082015260600190565b61ffff91909116815260200190565b600061ffff8916825273ffffffffffffffffffffffffffffffffffffffff8816602083015286604083015285606083015284608083015260c060a08301528260c0830152828460e084013781830160e090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019695505050505050565b61ffff95861681529390941660208401526fffffffffffffffffffffffffffffffff91909116604083015267ffffffffffffffff9081166060830152909116608082015260a00190565b61ffff9390931683526020830191909152604082015260600190565b90815260200190565b73ffffffffffffffffffffffffffffffffffffffff811681146128a157600080fd5b80151581146128a157600080fd5b6fffffffffffffffffffffffffffffffff811681146128a157600080fd5b67ffffffffffffffff811681146128a157600080fdfe4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061646472657373416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c496e697469616c697a61626c653a20636f6e747261637420697320616c726561647920696e697469616c697a6564536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f775361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220ddd7c05ecdb9b7e13b86cf6983400e0626d4c83cbeee5fdf91799e56a20588e864736f6c63430007060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2233,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 137,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 140,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 484,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 10,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "_owner",
        "offset": 0,
        "slot": "52",
        "type": "t_address"
      },
      {
        "astId": 129,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "__gap",
        "offset": 0,
        "slot": "53",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 6050,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "uln",
        "offset": 0,
        "slot": "102",
        "type": "t_contract(ILayerZeroUltraLightNodeV2)17279"
      },
      {
        "astId": 6052,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "stargateBridgeAddress",
        "offset": 0,
        "slot": "103",
        "type": "t_address"
      },
      {
        "astId": 6081,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstPriceLookupOld",
        "offset": 0,
        "slot": "104",
        "type": "t_mapping(t_uint16,t_struct(DstPrice)6060_storage)"
      },
      {
        "astId": 6087,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstConfigLookup",
        "offset": 0,
        "slot": "105",
        "type": "t_mapping(t_uint16,t_mapping(t_uint16,t_struct(DstConfig)6067_storage))"
      },
      {
        "astId": 6091,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "approvedAddresses",
        "offset": 0,
        "slot": "106",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6141,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "paused",
        "offset": 0,
        "slot": "107",
        "type": "t_bool"
      },
      {
        "astId": 6143,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "priceFeed",
        "offset": 1,
        "slot": "107",
        "type": "t_contract(ILayerZeroPriceFeedV2)16887"
      },
      {
        "astId": 6145,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "multiplierBps",
        "offset": 0,
        "slot": "108",
        "type": "t_uint128"
      },
      {
        "astId": 6147,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "validateProofBytes",
        "offset": 16,
        "slot": "108",
        "type": "t_uint16"
      },
      {
        "astId": 6149,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "fpBytes",
        "offset": 18,
        "slot": "108",
        "type": "t_uint16"
      },
      {
        "astId": 6151,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "mptOverhead",
        "offset": 20,
        "slot": "108",
        "type": "t_uint16"
      },
      {
        "astId": 6155,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstMultipliers",
        "offset": 0,
        "slot": "109",
        "type": "t_mapping(t_uint16,t_uint128)"
      },
      {
        "astId": 6159,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "dstFloorMarginsUSD",
        "offset": 0,
        "slot": "110",
        "type": "t_mapping(t_uint16,t_uint128)"
      },
      {
        "astId": 6163,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "priceConfigUpdaters",
        "offset": 0,
        "slot": "111",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 6165,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "stargateComposer",
        "offset": 0,
        "slot": "112",
        "type": "t_contract(IStargateComposer)6028"
      },
      {
        "astId": 6167,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "stargateBridgeAddr",
        "offset": 0,
        "slot": "113",
        "type": "t_address"
      },
      {
        "astId": 6169,
        "contract": "contracts/RelayerV2.sol:RelayerV2",
        "label": "nativeDecimalsRate",
        "offset": 0,
        "slot": "114",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILayerZeroPriceFeedV2)16887": {
        "encoding": "inplace",
        "label": "contract ILayerZeroPriceFeedV2",
        "numberOfBytes": "20"
      },
      "t_contract(ILayerZeroUltraLightNodeV2)17279": {
        "encoding": "inplace",
        "label": "contract ILayerZeroUltraLightNodeV2",
        "numberOfBytes": "20"
      },
      "t_contract(IStargateComposer)6028": {
        "encoding": "inplace",
        "label": "contract IStargateComposer",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_mapping(t_uint16,t_struct(DstConfig)6067_storage))": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => mapping(uint16 => struct RelayerV2.DstConfig))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint16,t_struct(DstConfig)6067_storage)"
      },
      "t_mapping(t_uint16,t_struct(DstConfig)6067_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct RelayerV2.DstConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(DstConfig)6067_storage"
      },
      "t_mapping(t_uint16,t_struct(DstPrice)6060_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => struct RelayerV2.DstPrice)",
        "numberOfBytes": "32",
        "value": "t_struct(DstPrice)6060_storage"
      },
      "t_mapping(t_uint16,t_uint128)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint128)",
        "numberOfBytes": "32",
        "value": "t_uint128"
      },
      "t_struct(DstConfig)6067_storage": {
        "encoding": "inplace",
        "label": "struct RelayerV2.DstConfig",
        "members": [
          {
            "astId": 6062,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "dstNativeAmtCap",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6064,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "baseGas",
            "offset": 16,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 6066,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "gasPerByte",
            "offset": 24,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DstPrice)6060_storage": {
        "encoding": "inplace",
        "label": "struct RelayerV2.DstPrice",
        "members": [
          {
            "astId": 6057,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "dstPriceRatio",
            "offset": 0,
            "slot": "0",
            "type": "t_uint128"
          },
          {
            "astId": 6059,
            "contract": "contracts/RelayerV2.sol:RelayerV2",
            "label": "dstGasPriceInWei",
            "offset": 16,
            "slot": "0",
            "type": "t_uint128"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}